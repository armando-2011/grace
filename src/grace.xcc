<?xml version="1.0"?>
<parser>
    <!-- Preamble -->
    <preamble><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "globals.h"
#include "defines.h"
#include "device.h"
#include "files.h"
#include "utils.h"
#include "dicts.h"
#include "draw.h"
#include "graphs.h"
#include "graphutils.h"
#include "objutils.h"
#include "protos.h"

#include "xstrings.h"

typedef struct {
    int axis;
    int nrow;
} ParserData;

typedef struct _Page {
    int width;
    int height;
} Page;

typedef struct {
    int id;
    CMap_entry cmap;
} Colordef;

Colordef *colordef_new()
{
    Colordef *retval;
    retval = xmalloc(sizeof(Colordef));
    retval->id = -1;
    retval->cmap.cname = NULL;
    return retval;
}

void colordef_free(Colordef *cd)
{
    if (cd) {
        xfree(cd->cmap.cname);
        xfree(cd);
    }
}

typedef struct {
    int id;
    char *fontname;
    char *fallback;
} Fontdef;

Fontdef *fontdef_new()
{
    Fontdef *retval;
    retval = xmalloc(sizeof(Fontdef));
    retval->id = -1;
    retval->fontname = NULL;
    retval->fallback = NULL;
    return retval;
}

void fontdef_free(Fontdef *fd)
{
    if (fd) {
        xfree(fd->fontname);
        xfree(fd->fallback);
        xfree(fd);
    }
}

typedef struct {
    int font;
    int color;
    double size;
} FaceSpec;

FaceSpec *facespec_new()
{
    FaceSpec *fs;
    fs = xmalloc(sizeof(FaceSpec));
    if (fs) {
        memset(fs, 0, sizeof(FaceSpec));
    }
    return fs;
}

void facespec_free(FaceSpec *fs)
{
    if (fs) {
        xfree(fs);
    }
}

typedef struct {
    GraphType type;
    int stacked;
    double bargap;
} PresentationSpec;


PresentationSpec *presentationspec_new()
{
    PresentationSpec *ps;
    ps = xmalloc(sizeof(PresentationSpec));
    if (ps) {
        memset(ps, 0, sizeof(PresentationSpec));
    }
    return ps;
}

void presentationspec_free(PresentationSpec *ps)
{
    if (ps) {
        xfree(ps);
    }
}

view *view_new()
{
    view *v;
    v = xmalloc(sizeof(view));
    if (v) {
        memset(v, 0, sizeof(view));
    }
    return v;
}

typedef struct {
    int type;
    double min;
    double max;
    int invert;
} Scale;

Scale *scale_new()
{
    Scale *s;
    s = xmalloc(sizeof(Scale));
    if (s) {
        memset(s, 0, sizeof(Scale));
    }
    return s;
}

typedef struct {
    int type;
    APoint ap;
} Location;

Location *location_new()
{
    Location *retval;
    retval = xmalloc(sizeof(Location));
    if (retval) {
        memset(retval, 0, sizeof(Location));
    }
    return retval;
}

typedef struct {
    Location location;
    Line line;
    Pen fillpen;
} Legframe;

legend *legend_new()
{
    legend *l;
    l = xmalloc(sizeof(legend));
    if (l) {
        memset(l, 0, sizeof(legend));
    }
    return l;
}

Legframe *legframe_new()
{
    Legframe *lf;
    lf = xmalloc(sizeof(Legframe));
    if (lf) {
        memset(lf, 0, sizeof(Legframe));
    }
    return lf;
}

typedef struct {
    int active;
    double x;
    double y;
} Fixedpoint;

Fixedpoint *fixedpoint_new()
{
    Fixedpoint *fp;
    fp = xmalloc(sizeof(Fixedpoint));
    if (fp) {
        memset(fp, 0, sizeof(Fixedpoint));
    }
    return fp;
}

GLocator *glocator_new()
{
    GLocator *retval;
    retval = xmalloc(sizeof(GLocator));
    if (retval) {
        memset(retval, 0, sizeof(GLocator));
    }
    return retval;
}

typedef struct {
    int type;
    int prec;
} Format;

Format *format_new()
{
    Format *retval;
    retval = xmalloc(sizeof(Format));
    if (retval) {
        memset(retval, 0, sizeof(Format));
    }
    return retval;
}

framep *frame_new()
{
    framep *retval;
    retval = xmalloc(sizeof(framep));
    if (retval) {
        memset(retval, 0, sizeof(framep));
    }
    return retval;
}

plotstr *plotstr_new()
{
    plotstr *retval;
    retval = xmalloc(sizeof(plotstr));
    if (retval) {
        memset(retval, 0, sizeof(plotstr));
    }
    return retval;
}

typedef struct {
    int zero;
    VPoint offset;
} APlacement;

APlacement *axisplacement_new()
{
    APlacement *retval;
    retval = xmalloc(sizeof(APlacement));
    if (retval) {
        memset(retval, 0, sizeof(APlacement));
    }
    return retval;
}

typedef struct {
    int active;
    Line line;
} ABar;

ABar *axisbar_new()
{
    ABar *retval;
    retval = xmalloc(sizeof(ABar));
    if (retval) {
        memset(retval, 0, sizeof(ABar));
    }
    return retval;
}

typedef struct {
    char *s;
    int font;
    int color;
    double charsize;
    int layout;
    int sideplacement;
    int autoplace;
    VPoint offset;
} ALabel;

ALabel *axislabel_new()
{
    ALabel *retval;
    retval = xmalloc(sizeof(ALabel));
    if (retval) {
        memset(retval, 0, sizeof(ALabel));
    }
    return retval;
}

typedef struct {
    int active;
    int sideplacement;
    int inoutplacement;
    tickprops props;
    tickprops mprops;
} TMarks;

TMarks *tmarks_new()
{
    TMarks *retval;
    retval = xmalloc(sizeof(TMarks));
    if (retval) {
        memset(retval, 0, sizeof(TMarks));
    }
    return retval;
}

typedef struct {
    int active;
    int sideplacement;
    char *transform;
    char *prepend;
    char *append;
    int autoplace;
    VPoint offset;
    double angle;
    int skip;
    int stagger;
    int autostart;
    double start;
    int autostop;
    double stop;
    FaceSpec facespec;
    Format format;
} TLabels;

TLabels *tlabels_new()
{
    TLabels *retval;
    retval = xmalloc(sizeof(TLabels));
    if (retval) {
        memset(retval, 0, sizeof(TLabels));
    }
    return retval;
}

typedef struct {
    int type;                   /* type of user ticks */
    int nticks;                 /* total number of ticks */
    tickloc tloc[MAX_TICKS];    /* locations of ticks */
} UTicks;

UTicks *uticks_new()
{
    UTicks *retval;
    retval = xmalloc(sizeof(UTicks));
    if (retval) {
        memset(retval, 0, sizeof(UTicks));
    }
    return retval;
}

tickloc *tick_new()
{
    tickloc *retval;
    retval = xmalloc(sizeof(tickloc));
    if (retval) {
        memset(retval, 0, sizeof(tickloc));
    }
    return retval;
}

int utick_add(UTicks *uticks, tickloc *tick)
{
    if (uticks && uticks->nticks < MAX_TICKS) {
        uticks->tloc[uticks->nticks++] = *tick;
        return RETURN_SUCCESS;
    } else {
        return RETURN_FAILURE;
    }
}


typedef struct {
    double major;
    int nminor;
    int autonum;
    int round;
    UTicks uticks;
    TMarks tmarks;
    TLabels tlabels;
} Ticks;

Ticks *ticks_new()
{
    Ticks *retval;
    retval = xmalloc(sizeof(Ticks));
    if (retval) {
        memset(retval, 0, sizeof(Ticks));
    }
    return retval;
}

tickprops *tickprops_new()
{
    tickprops *retval;
    retval = xmalloc(sizeof(tickprops));
    if (retval) {
        memset(retval, 0, sizeof(tickprops));
    }
    return retval;
}

typedef struct {
    int autov;
    double value;
} Autoval;

typedef struct {
    int type;
    double size;
    Line line;
    Pen fillpen;
    int skip;
    char symchar;
    int charfont;
} Symbol;

Symbol *symbol_new()
{
    Symbol *retval;
    retval = xmalloc(sizeof(Symbol));
    if (retval) {
        memset(retval, 0, sizeof(Symbol));
    }
    return retval;
}

typedef struct {
    int type;
    int filltype;
    int fillrule;
    int baseline;
    int baseline_type;
    int droplines;
    Line line;
    Pen fillpen;
} SetLine;

SetLine *setline_new()
{
    SetLine *retval;
    retval = xmalloc(sizeof(SetLine));
    if (retval) {
        memset(retval, 0, sizeof(SetLine));
    }
    return retval;
}

typedef struct {
    double size;
    Line line;
} BarLine;

BarLine *barline_new(void)
{
    BarLine *retval;
    retval = xmalloc(sizeof(BarLine));
    if (retval) {
        memset(retval, 0, sizeof(BarLine));
    }
    return retval;
}

typedef struct {
    int arrow_clip;
    double clip_length;
    Line line;
} RiserLine;

RiserLine *riserline_new(void)
{
    RiserLine *retval;
    retval = xmalloc(sizeof(RiserLine));
    if (retval) {
        memset(retval, 0, sizeof(RiserLine));
    }
    return retval;
}

Arrow *arrow_new(void)
{
    Arrow *retval;
    retval = xmalloc(sizeof(Arrow));
    if (retval) {
        memset(retval, 0, sizeof(Arrow));
    }
    return retval;
}

char *utf2iso(const char *s)
{
    char *retval;
    char *p1, *p2;
    
    if (!s) {
        return NULL;
    }
    
    retval = xmalloc(strlen(s) + 1);
    if (!retval) {
        return NULL;
    }
    
    p1 = (char *) s;
    p2 = retval;
    
    while (*p1) {
        if (*p1 & 0x80) {
            /* last 2 bits */
            *p2 = (*p1 & 0x03) << 6; p1++;
            /* last 6 bits of the next byte */
            *p2 += *p1 & 0x3F;
        } else {
            *p2 = *p1;
        }
        p1++; p2++;
    }
    
    *(p2) = '\0';
    
    return retval;
}

    ]]></preamble>

    <!-- Attribute types -->
    <attribute-type name="ival" ctype="int"><![CDATA[
        $$ = atoi($?);
    ]]></attribute-type>
    <attribute-type name="dval" ctype="double"><![CDATA[
        $$ = atof($?);
    ]]></attribute-type>
    <attribute-type name="sval" ctype="char *"><![CDATA[
        $$ = utf2iso($?);
    ]]></attribute-type>
    <attribute-type name="bval" ctype="int"><![CDATA[
        $$ = compare_strings($?, "yes");
    ]]></attribute-type>
    <attribute-type name="rgb" ctype="RGB *"><![CDATA[
        $$ = xmalloc(sizeof(RGB));
        sscanf($?, "#%02x%02x%02x", &($$->red), &($$->green), &($$->blue));
    ]]></attribute-type>
    <attribute-type name="ftype" ctype="int"><![CDATA[
        $$ = get_format_type_by_name($?);
    ]]></attribute-type>
    <attribute-type name="fontid" ctype="int"><![CDATA[
        $$ = get_mapped_font(atoi($?));
    ]]></attribute-type>
    <attribute-type name="offset" ctype="VPoint *"><![CDATA[
        if (!strcmp($?, VStrAuto)) {
            $$ = NULL;
        } else {
            $$ = xmalloc(sizeof(VPoint));
            sscanf($?, "(%lg, %lg)", &($$->x), &($$->y));
        }
    ]]></attribute-type>
    <attribute-type name="axislayout" ctype="int"><![CDATA[
        if (!strcmp($?, VStrParallel)) {
            $$ = LAYOUT_PARALLEL;
        } else {
            $$ = LAYOUT_PERPENDICULAR;
        }
    ]]></attribute-type>
    <attribute-type name="sideplacement" ctype="int"><![CDATA[
        if (!strcmp($?, VStrNormal)) {
            $$ = PLACEMENT_NORMAL;
        } else
        if (!strcmp($?, VStrOpposite)) {
            $$ = PLACEMENT_OPPOSITE;
        } else
        if (!strcmp($?, VStrBoth)) {
            $$ = PLACEMENT_BOTH;
        } else {
            $$ = PLACEMENT_NORMAL;
            errmsg("Wrong sideplacement");
        }
    ]]></attribute-type>
    <attribute-type name="inoutplacement" ctype="int"><![CDATA[
        if (!strcmp($?, VStrIn)) {
            $$ = TICKS_IN;
        } else
        if (!strcmp($?, VStrOut)) {
            $$ = TICKS_OUT;
        } else
        if (!strcmp($?, VStrBoth)) {
            $$ = TICKS_BOTH;
        } else {
            $$ = TICKS_IN;
            errmsg("Wrong inoutplacement");
        }
    ]]></attribute-type>
    <attribute-type name="uticktype" ctype="int"><![CDATA[
        if (!strcmp($?, VStrNone)) {
            $$ = TICKS_SPEC_NONE;
        } else
        if (!strcmp($?, VStrTicks)) {
            $$ = TICKS_SPEC_MARKS;
        } else
        if (!strcmp($?, VStrBoth)) {
            $$ = TICKS_SPEC_BOTH;
        } else {
            $$ = TICKS_SPEC_BOTH;
            errmsg("Wrong uticktype");
        }
    ]]></attribute-type>
    <attribute-type name="ticktype" ctype="int"><![CDATA[
        if (!strcmp($?, VStrMajor)) {
            $$ = TICK_TYPE_MAJOR;
        } else
        if (!strcmp($?, VStrMinor)) {
            $$ = TICK_TYPE_MINOR;
        } else {
            $$ = TICK_TYPE_MINOR;
            errmsg("Wrong ticktype");
        }
    ]]></attribute-type>
    <attribute-type name="autoval" ctype="Autoval *"><![CDATA[
        $$ = xmalloc(sizeof(Autoval));
        if (!strcmp($?, VStrAuto)) {
            $$->autov = TRUE;
            $$->value = 0.0;
        } else {
            $$->autov = FALSE;
            $$->value = atof($?);
        }
    ]]></attribute-type>
    <attribute-type name="loctype" ctype="int"><![CDATA[
        if (!strcmp($?, VStrWorld)) {
            $$ = COORD_WORLD;
        } else {
            $$ = COORD_VIEW;
        }
    ]]></attribute-type>
    <attribute-type name="settype" ctype="SetType"><![CDATA[
        $$ = get_settype_by_name(grace->rt, $?);
    ]]></attribute-type>
    <attribute-type name="fillrule" ctype="int"><![CDATA[
        if (!strcmp($?, VStrWinding)) {
            $$ = FILLRULE_WINDING;
        } else {
            $$ = FILLRULE_EVENODD;
        }
    ]]></attribute-type>
    
    <!-- Element types -->
    <element-type name="project" ctype="Project *"><![CDATA[
        $$ = project_new();
    ]]></element-type>
    <element-type name="page" ctype="Page *"><![CDATA[
        $$ = xmalloc(sizeof(Page));
        $$->width = $$->height = 0;
    ]]></element-type>
    <element-type name="string" ctype="XCCString *"><![CDATA[
        $$ = xcc_string_new();
    ]]></element-type>
    <element-type name="pen" ctype="Pen *"><![CDATA[
        $$ = xmalloc(sizeof(Pen));
        $$->color = $$->pattern = 1;
    ]]></element-type>
    <element-type name="line" ctype="Line *"><![CDATA[
        $$ = xmalloc(sizeof(Line));
        $$->pen.color = $$->pen.pattern = 1;
        $$->width = 1.0;
        $$->style = 1;
    ]]></element-type>
    <element-type name="dummy" ctype="void *"><![CDATA[
        $$ = NULL;
    ]]></element-type>
    <element-type name="colordef" ctype="Colordef *"><![CDATA[
        $$ = colordef_new();
        $$->cmap.ctype = COLOR_MAIN;
    ]]></element-type>
    <element-type name="fontdef" ctype="Fontdef *"><![CDATA[
        $$ = fontdef_new();
    ]]></element-type>
    <element-type name="facespec" ctype="FaceSpec *"><![CDATA[
        $$ = facespec_new();
    ]]></element-type>
    <element-type name="graph" ctype="graph *"><![CDATA[
        $$ = graph_new();
    ]]></element-type>
    <element-type name="presentationspec" ctype="PresentationSpec *"><![CDATA[
        $$ = presentationspec_new();
    ]]></element-type>
    <element-type name="view" ctype="view *"><![CDATA[
        $$ = view_new();
    ]]></element-type>
    <element-type name="scale" ctype="Scale *"><![CDATA[
        $$ = scale_new();
    ]]></element-type>
    <element-type name="dptr" ctype="double *"><![CDATA[
        $$ = xcalloc(1, SIZEOF_DOUBLE);
    ]]></element-type>
    <element-type name="legend" ctype="legend *"><![CDATA[
        $$ = legend_new();
    ]]></element-type>
    <element-type name="legframe" ctype="Legframe *"><![CDATA[
        $$ = legframe_new();
    ]]></element-type>
    <element-type name="glocator" ctype="GLocator *"><![CDATA[
        $$ = glocator_new();
    ]]></element-type>
    <element-type name="fixedpoint" ctype="Fixedpoint *"><![CDATA[
        $$ = fixedpoint_new();
    ]]></element-type>
    <element-type name="format" ctype="Format *"><![CDATA[
        $$ = format_new();
    ]]></element-type>
    <element-type name="frame" ctype="framep *"><![CDATA[
        $$ = frame_new();
    ]]></element-type>
    <element-type name="plotstr" ctype="plotstr *"><![CDATA[
        $$ = plotstr_new();
    ]]></element-type>
    <element-type name="axis" ctype="tickmarks *"><![CDATA[
        $$ = new_graph_tickmarks();
    ]]></element-type>
    <element-type name="axisplacement" ctype="APlacement *"><![CDATA[
        $$ = axisplacement_new();
    ]]></element-type>
    <element-type name="axisbar" ctype="ABar *"><![CDATA[
        $$ = axisbar_new();
    ]]></element-type>
    <element-type name="axislabel" ctype="ALabel *"><![CDATA[
        $$ = axislabel_new();
    ]]></element-type>
    <element-type name="ticks" ctype="Ticks *"><![CDATA[
        $$ = ticks_new();
    ]]></element-type>
    <element-type name="tmarks" ctype="TMarks *"><![CDATA[
        $$ = tmarks_new();
    ]]></element-type>
    <element-type name="tickprops" ctype="tickprops *"><![CDATA[
        $$ = tickprops_new();
    ]]></element-type>
    <element-type name="tlabels" ctype="TLabels *"><![CDATA[
        $$ = tlabels_new();
    ]]></element-type>
    <element-type name="uticks" ctype="UTicks *"><![CDATA[
        $$ = uticks_new();
    ]]></element-type>
    <element-type name="tick" ctype="tickloc *"><![CDATA[
        $$ = tick_new();
    ]]></element-type>
    <element-type name="object" ctype="DObject *"><![CDATA[
        $$ = object_new();
    ]]></element-type>
    <element-type name="location" ctype="Location *"><![CDATA[
        $$ = location_new();
    ]]></element-type>
    <element-type name="do_line_data" ctype="DOLineData *"><![CDATA[
        $$ = object_data_new(DO_LINE);
    ]]></element-type>
    <element-type name="do_box_data" ctype="DOBoxData *"><![CDATA[
        $$ = object_data_new(DO_BOX);
    ]]></element-type>
    <element-type name="do_arc_data" ctype="DOArcData *"><![CDATA[
        $$ = object_data_new(DO_ARC);
    ]]></element-type>
    <element-type name="arrow" ctype="Arrow *"><![CDATA[
        $$ = arrow_new();
    ]]></element-type>
    <element-type name="do_string_data" ctype="DOStringData *"><![CDATA[
        $$ = object_data_new(DO_STRING);
    ]]></element-type>
    <element-type name="set" ctype="set *"><![CDATA[
        $$ = set_new();
    ]]></element-type>
    <element-type name="symbol" ctype="Symbol *"><![CDATA[
        $$ = symbol_new();
    ]]></element-type>
    <element-type name="setline" ctype="SetLine *"><![CDATA[
        $$ = setline_new();
    ]]></element-type>
    <element-type name="annotation" ctype="AValue *"><![CDATA[
        $$ = xmalloc(sizeof(AValue));
        memset($$, 0, sizeof(AValue));
    ]]></element-type>
    <element-type name="errorbar" ctype="Errbar *"><![CDATA[
        $$ = xmalloc(sizeof(Errbar));
        memset($$, 0, sizeof(Errbar));
    ]]></element-type>
    <element-type name="barline" ctype="BarLine *"><![CDATA[
        $$ = barline_new();
    ]]></element-type>
    <element-type name="riserline" ctype="RiserLine *"><![CDATA[
        $$ = riserline_new();
    ]]></element-type>
    <element-type name="dataset" ctype="Dataset *"><![CDATA[
        $$ = dataset_new();
        ((ParserData *) $U)->nrow = 0;
    ]]></element-type>
    <element-type name="datapoint" ctype="Datapoint *"><![CDATA[
        $$ = datapoint_new();
    ]]></element-type>


    <!-- Now describe the document structure -->
    <element name="#EStrGrace" type="project">
        <!-- Attributes -->
        <attribute name="#AStrVersion" type="ival">
            project_set_version_id($$, $?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrDescription">
            project_set_description($$, $?->s);
            xcc_string_free($?);
        </child>
        <child name="#EStrDefinitions">
        </child>
        <child name="#EStrPage">
            set_page_dimensions($?->width, $?->height, FALSE);
            xfree($?);
        </child>
        <child name="#EStrDataFormats">
        </child>
        <child name="#EStrGraph">
            storage_add($$->graphs, $?);
        </child>
    </element>
    <element name="#EStrDefinitions" type="dummy">
        <!-- Child elements -->
        <child name="#EStrColormap">
        </child>
        <child name="#EStrFontmap">
        </child>
    </element>
    <element name="#EStrColormap" type="dummy">
        <!-- Child elements -->
        <child name="#EStrColorDef">
            store_color($?->id, $?->cmap);
            colordef_free($?);
        </child>
    </element>
    <element name="#EStrFontmap" type="dummy">
        <!-- Child elements -->
        <child name="#EStrFontDef"><![CDATA[
            if ((map_font_by_name($?->fontname, $?->id) != RETURN_SUCCESS) && 
                (map_font_by_name($?->fallback, $?->id) != RETURN_SUCCESS)) {
                errmsg("Failed mapping a font");
            }
            fontdef_free($?);
        ]]></child>
    </element>
    <element name="#EStrColorDef" type="colordef">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            $$->id = $?;
        </attribute>
        <attribute name="#AStrRgb" type="rgb">
            $$->cmap.rgb = *($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrName" type="sval">
            $$->cmap.cname = $?;
        </attribute>
    </element>
    <element name="#EStrFontDef" type="fontdef">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            $$->id = $?;
        </attribute>
        <attribute name="#AStrName" type="sval">
            $$->fontname = $?;
        </attribute>
        <attribute name="#AStrFallback" type="sval">
            $$->fallback = $?;
        </attribute>
    </element>
    <element name="#EStrPage" type="page">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="ival">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="ival">
            $$->height = $?;
        </attribute>
        <child name="#EStrFillSpec">
            setbgcolor($?->color);
            setbgfill($?->pattern);
            xfree($?);
        </child>
    </element>
    <element name="#EStrDescription" type="string">
        <!-- Child elements -->
        <child name="#EStrText">
            xcc_string_set($$, $?->s);
            xcc_string_free($?);
        </child>
    </element>
    <element name="#EStrDataFormats" type="dummy">
        <!-- Child elements -->
        <child name="#EStrDates">
        </child>
        <child name="#EStrWorld">
        </child>
    </element>
    <element name="#EStrFaceSpec" type="facespec">
        <!-- Attributes -->
        <attribute name="#AStrFontId" type="fontid">
            $$->font = $?;
        </attribute>
        <attribute name="#AStrColorId" type="ival">
            $$->color = $?;
        </attribute>
        <attribute name="#AStrCharSize" type="dval">
            $$->size = $?;
        </attribute>
    </element>
    <element name="#EStrDates" type="dummy">
        <!-- Attributes -->
        <attribute name="#AStrReference" type="ival">
            set_ref_date($?);
        </attribute>
        <attribute name="#AStrWrap" type="bval">
            allow_two_digits_years($?);
        </attribute>
        <attribute name="#AStrWrapYear" type="ival">
            set_wrap_year($?);
        </attribute>
    </element>
    <element name="#EStrWorld" type="dummy">
        <!-- Attributes -->
        <attribute name="#AStrFormat" type="sval">
            Project *pr = (Project *) $0;
            pr->sformat = copy_string(pr->sformat, $?);
            xfree($?);
        </attribute>
    </element>
    <element name="#EStrText" type="string">
        <!-- Character data -->
        <data>
            char *s;
            s = utf2iso($?);
            xcc_string_set($$, s);
            xfree(s);
        </data>
    </element>
    <element name="#EStrFillSpec" type="pen">
        <!-- Attributes -->
        <attribute name="#AStrColorId" type="ival">
            $$->color = $?;
        </attribute>
        <attribute name="#AStrPatternId" type="ival">
            $$->pattern = $?;
        </attribute>
    </element>
    <element name="#EStrGraph" type="graph">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            /* FIXME */
        </attribute>
        <attribute name="#AStrActive" type="bval">
            $$->hidden = !($?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrPresentationSpec">
            $$->type    = $?->type;
            $$->stacked = $?->stacked;
            $$->bargap  = $?->bargap;
            presentationspec_free($?);
        </child>
        <child name="#EStrViewport">
            $$->v = *($?);
            xfree($?);
        </child>
        <child name="#EStrXscale">
            $$->xscale  = $?->type;
            $$->xinvert = $?->invert;
            $$->w.xg1   = $?->min;
            $$->w.xg2   = $?->max;
            xfree($?);
        </child>
        <child name="#EStrYscale">
            $$->yscale  = $?->type;
            $$->yinvert = $?->invert;
            $$->w.yg1   = $?->min;
            $$->w.yg2   = $?->max;
            xfree($?);
        </child>
        <child name="#EStrZscale">
            $$->znorm = *($?);
            xfree($?);
        </child>
        <child name="#EStrLegend">
            $$->l = *($?);
            xfree($?);
        </child>
        <child name="#EStrLocator">
            $$->locator = *($?);
            xfree($?);
        </child>
        <child name="#EStrFrame">
            $$->f = *($?);
            xfree($?);
        </child>
        <child name="#EStrTitle">
            $$->labs.title = *($?);
            xfree($?);
        </child>
        <child name="#EStrSubtitle">
            $$->labs.stitle = *($?);
            xfree($?);
        </child>
        <child name="#EStrAxis"><![CDATA[
            int axis = ((ParserData *) $U)->axis;
            if (axis >= 0 && axis < MAXAXES) {
                free_graph_tickmarks($$->t[axis]);
                $$->t[axis] = $?;
            }
        ]]></child>
        <child name="#EStrObject">
            storage_add($$->dobjects, (void *) $?);
        </child>
        <child name="#EStrSet">
            storage_add($$->sets, $?);
        </child>
    </element>
    <element name="#EStrPresentationSpec" type="presentationspec">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            $$->type = get_graph_type_by_name(grace->rt, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrStacked" type="bval">
            $$->stacked = $?;
        </attribute>
        <attribute name="#AStrBargap" type="dval">
            $$->bargap = $?;
        </attribute>
    </element>
    <element name="#EStrViewport" type="view">
        <!-- Attributes -->
        <attribute name="#AStrXmin" type="dval">
            $$->xv1 = $?;
        </attribute>
        <attribute name="#AStrYmin" type="dval">
            $$->yv1 = $?;
        </attribute>
        <attribute name="#AStrXmax" type="dval">
            $$->xv2 = $?;
        </attribute>
        <attribute name="#AStrYmax" type="dval">
            $$->yv2 = $?;
        </attribute>
    </element>
    <element name="#EStrXscale" type="scale">
        <!-- Attributes -->
        <attribute name="#AStrMin" type="dval">
            $$->min = $?;
        </attribute>
        <attribute name="#AStrMax" type="dval">
            $$->max = $?;
        </attribute>
        <attribute name="#AStrType" type="sval">
            $$->type = get_scale_type_by_name($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
    </element>
    <element name="#EStrYscale" type="scale">
        <!-- Attributes -->
        <attribute name="#AStrMin" type="dval">
            $$->min = $?;
        </attribute>
        <attribute name="#AStrMax" type="dval">
            $$->max = $?;
        </attribute>
        <attribute name="#AStrType" type="sval">
            $$->type = get_scale_type_by_name($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
    </element>
    <element name="#EStrZscale" type="dptr">
        <!-- Attributes -->
        <attribute name="#AStrNorm" type="dval">
            *($$) = $?;
        </attribute>
    </element>
    <element name="#EStrLegend" type="legend">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrLength" type="ival">
            $$->len = $?;
        </attribute>
        <attribute name="#AStrVgap" type="ival">
            $$->vgap = $?;
        </attribute>
        <attribute name="#AStrHgap" type="ival">
            $$->hgap = $?;
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->font     = $?->font;
            $$->color    = $?->color;
            $$->charsize = $?->size;
            facespec_free($?);
        </child>
        <child name="#EStrLegframe">
            $$->boxfillpen = $?->fillpen;
            $$->boxpen     = $?->line.pen;
            $$->boxlinew   = $?->line.width;
            $$->boxlines   = $?->line.style;
            $$->loctype    = $?->location.type;
            $$->legx       = $?->location.ap.x;
            $$->legy       = $?->location.ap.y;
            xfree($?);
        </child>
    </element>
    <element name="#EStrLegframe" type="legframe">
        <!-- Child elements -->
        <child name="#EStrLocation">
            $$->location = *($?);
            xfree($?);
        </child>
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLineSpec" type="line">
        <!-- Attributes -->
        <attribute name="#AStrColorId" type="ival">
            $$->pen.color = $?;
        </attribute>
        <attribute name="#AStrPatternId" type="ival">
            $$->pen.pattern = $?;
        </attribute>
        <attribute name="#AStrStyleId" type="ival">
            $$->style = $?;
        </attribute>
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
    </element>
    <element name="#EStrLocator" type="glocator">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ival">
            $$->pt_type = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrFixedpoint">
            $$->pointset = $?->active;
            $$->dsx      = $?->x;
            $$->dsy      = $?->y;
            xfree($?);
        </child>
        <child name="#EStrXformat">
            $$->fx = $?->type;
            $$->px = $?->prec;
            xfree($?);
        </child>
        <child name="#EStrYformat">
            $$->fy = $?->type;
            $$->py = $?->prec;
            xfree($?);
        </child>
    </element>
    <element name="#EStrFixedpoint" type="fixedpoint">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrX" type="dval">
            $$->x = $?;
        </attribute>
        <attribute name="#AStrY" type="dval">
            $$->y = $?;
        </attribute>
    </element>
    <element name="#EStrXformat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrFormat" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
    </element>
    <element name="#EStrYformat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrFormat" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
    </element>
    <element name="#EStrFrame" type="frame">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ival">
            $$->type = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->linew = $?->width;
            $$->lines = $?->style;
            $$->pen   = $?->pen;
            xfree($?);
        </child>
        <child name="#EStrFillSpec">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrTitle" type="plotstr">
        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->font     = $?->font;
            $$->color    = $?->color;
            $$->charsize = $?->size;
            xfree($?);
        </child>
        <child name="#EStrText">
            $$->s = copy_string(NULL, $?->s);
            xcc_string_free($?);
        </child>
    </element>
    <element name="#EStrSubtitle" type="plotstr">
        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->font     = $?->font;
            $$->color    = $?->color;
            $$->charsize = $?->size;
            xfree($?);
        </child>
        <child name="#EStrText">
            $$->s = copy_string(NULL, $?->s);
            xcc_string_free($?);
        </child>
    </element>
    <element name="#EStrAxis" type="axis">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            int axis;
            if (!strcmp($?, "x")) {
                axis = 0;
            } else 
            if (!strcmp($?, "y")) {
                axis = 1;
            } else 
            if (!strcmp($?, "altx")) {
                axis = 2;
            } else 
            if (!strcmp($?, "alty")) {
                axis = 3;
            } else {
                axis = -1;
            } 
            ((ParserData *) $U)->axis = axis;
        </attribute>
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrPlacement">
            $$->zero   = $?->zero;
            $$->offsx  = $?->offset.x;
            $$->offsy  = $?->offset.y;
            xfree($?);
        </child>
        <child name="#EStrAxisbar">
            $$->t_drawbar      = $?->active;
            $$->t_drawbarcolor = $?->line.pen.color;
            $$->t_drawbarlines = $?->line.style;
            $$->t_drawbarlinew = $?->line.width;
            xfree($?);
        </child>
        <child name="#EStrAxislabel">
            $$->label.s        = $?->s;
            $$->label.font     = $?->font;
            $$->label.color    = $?->color;
            $$->label.charsize = $?->charsize;
            xfree($?);
        </child>
        <child name="#EStrTicks"><![CDATA[
            $$->tmajor    = $?->major;
            $$->nminor    = $?->nminor;
            $$->t_autonum = $?->autonum;
            $$->t_round   = $?->round;

            $$->t_flag    = $?->tmarks.active;
            $$->t_inout   = $?->tmarks.inoutplacement;
            $$->t_op      = $?->tmarks.sideplacement;
            $$->props     = $?->tmarks.props;
            $$->mprops    = $?->tmarks.mprops;

            $$->t_spec    = $?->uticks.type;
            if ($$->t_spec != TICKS_SPEC_NONE) {
                int i;
                $$->nticks = $?->uticks.nticks;
                for (i = 0; i < $$->nticks; i++) {
                    $$->tloc[i] = $?->uticks.tloc[i];
                }
            }
            
            $$->tl_flag   = $?->tlabels.active;
    
            $$->tl_op        = $?->tlabels.sideplacement;
            $$->tl_formula   = $?->tlabels.transform;
            $$->tl_font      = $?->tlabels.facespec.font;
            $$->tl_color     = $?->tlabels.facespec.color;
            $$->tl_charsize  = $?->tlabels.facespec.size;
            $$->tl_angle     = $?->tlabels.angle;
            $$->tl_skip      = $?->tlabels.skip;
            $$->tl_staggered = $?->tlabels.stagger;
            $$->tl_format    = $?->tlabels.format.type;
            $$->tl_prec      = $?->tlabels.format.prec;
            $$->tl_gaptype   = $?->tlabels.autoplace ? TYPE_AUTO:TYPE_SPEC;
            $$->tl_gap.x     = $?->tlabels.offset.x;
            $$->tl_gap.y     = $?->tlabels.offset.y;
            $$->tl_starttype = $?->tlabels.autostart ? TYPE_AUTO:TYPE_SPEC;
            $$->tl_start     = $?->tlabels.start;
            $$->tl_stoptype  = $?->tlabels.autostop ? TYPE_AUTO:TYPE_SPEC;
            $$->tl_stop      = $?->tlabels.stop;
            strcpy($$->tl_prestr, $?->tlabels.prepend);
            strcpy($$->tl_appstr, $?->tlabels.append);
            
            xfree($?->tlabels.prepend);
            xfree($?->tlabels.append);
            xfree($?);
        ]]></child>
    </element>
    <element name="#EStrPlacement" type="axisplacement">
        <!-- Attributes -->
        <attribute name="#AStrZero" type="bval">
            $$->zero = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            if ($?) {
                $$->offset.x = $?->x;
                $$->offset.y = $?->y;
                xfree($?);
            }
        </attribute>
    </element>
    <element name="#EStrAxisbar" type="axisbar">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrAxislabel" type="axislabel">
        <!-- Attributes -->
        <attribute name="#AStrLayout" type="axislayout">
            $$->layout = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            if ($?) {
                $$->autoplace = FALSE;
                $$->offset.x  = $?->x;
                $$->offset.y  = $?->y;
                xfree($?);
            } else {
                $$->autoplace = TRUE;
            }
        </attribute>
        <attribute name="#AStrSidePlacement" type="sideplacement">
            $$->sideplacement = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->font     = $?->font;
            $$->color    = $?->color;
            $$->charsize = $?->size;
            xfree($?);
        </child>
        <child name="#EStrText">
            $$->s = copy_string(NULL, $?->s);
            xcc_string_free($?);
        </child>
    </element>
    <element name="#EStrTicks" type="ticks">
        <!-- Attributes -->
        <attribute name="#AStrMajorStep" type="dval">
            $$->major = $?;
        </attribute>
        <attribute name="#AStrMinorDivisions" type="ival">
            $$->nminor = $?;
        </attribute>
        <attribute name="#AStrAutoTicking" type="ival">
            $$->autonum = $?;
        </attribute>
        <attribute name="#AStrRoundedPosition" type="bval">
            $$->round = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrUserticks">
            $$->uticks = *($?);
            xfree($?);
        </child>
        <child name="#EStrTickmarks">
            $$->tmarks = *($?);
            xfree($?);
        </child>
        <child name="#EStrTicklabels">
            $$->tlabels = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrUserticks" type="uticks">
        <!-- Attributes -->
        <attribute name="#AStrType" type="uticktype">
            $$->type = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrTick">
            utick_add($$, $?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrTickmarks" type="tmarks">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrSidePlacement" type="sideplacement">
            $$->sideplacement = $?;
        </attribute>
        <attribute name="#AStrInoutPlacement" type="inoutplacement">
            $$->inoutplacement = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrMajor">
            $$->props = *($?);
            xfree($?);
        </child>
        <child name="#EStrMinor">
            $$->mprops = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrMajor" type="tickprops">
        <!-- Attributes -->
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        <attribute name="#AStrGridLines" type="bval">
            $$->gridflag = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->color = $?->pen.color;
            $$->linew = $?->width;
            $$->lines = $?->style;
            xfree($?);
        </child>
    </element>
    <element name="#EStrMinor" type="tickprops">
        <!-- Attributes -->
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        <attribute name="#AStrGridLines" type="bval">
            $$->gridflag = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->color = $?->pen.color;
            $$->linew = $?->width;
            $$->lines = $?->style;
            xfree($?);
        </child>
    </element>
    <element name="#EStrTicklabels" type="tlabels">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrSidePlacement" type="sideplacement">
            $$->sideplacement = $?;
        </attribute>
        <attribute name="#AStrTransform" type="sval">
            $$->transform = $?;
        </attribute>
        <attribute name="#AStrPrepend" type="sval">
            $$->prepend = $?;
        </attribute>
        <attribute name="#AStrAppend" type="sval">
            $$->append = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            if ($?) {
                $$->autoplace = FALSE;
                $$->offset.x  = $?->x;
                $$->offset.y  = $?->y;
                xfree($?);
            } else {
                $$->autoplace = TRUE;
            }
        </attribute>
        <attribute name="#AStrAngle" type="dval">
            $$->angle = $?;
        </attribute>
        <attribute name="#AStrSkip" type="ival">
            $$->skip = $?;
        </attribute>
        <attribute name="#AStrStagger" type="ival">
            $$->stagger = $?;
        </attribute>
        <attribute name="#AStrStart" type="autoval">
            $$->autostart = $?->autov;
            $$->start     = $?->value;
            xfree($?);
        </attribute>
        <attribute name="#AStrStop" type="autoval">
            $$->autostop = $?->autov;
            $$->stop     = $?->value;
            xfree($?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->facespec = *($?);
            xfree($?);
        </child>
        <child name="#EStrFormat">
            $$->format = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrTick" type="tick">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ticktype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPosition" type="dval">
            $$->wtpos = $?;
        </attribute>
        <attribute name="#AStrLabel" type="sval">
            $$->label = $?;
        </attribute>
    </element>
    <element name="#EStrFormat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrFormat" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
    </element>
    <element name="#EStrObject" type="object">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrAngle" type="dval">
            $$->angle = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            $$->offset = *($?);
            xfree($?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->line  = *($?);
            xfree($?);
        </child>
        <child name="#EStrLocation">
            $$->loctype = $?->type;
            $$->ap = $?->ap;
            xfree($?);
        </child>
        <child name="#EStrFillSpec">
            $$->fillpen = *($?);
            xfree($?);
        </child>
        <child name="#EStrLineData">
            $$->odata = $?;
            $$->type = DO_LINE;
        </child>
        <child name="#EStrBoxData">
            $$->odata = $?;
            $$->type = DO_BOX;
        </child>
        <child name="#EStrArcData">
            $$->odata = $?;
            $$->type = DO_ARC;
        </child>
        <child name="#EStrStringData">
            $$->odata = $?;
            $$->type = DO_STRING;
        </child>
    </element>
    <element name="#EStrLocation" type="location">
        <!-- Attributes -->
        <attribute name="#AStrType" type="loctype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrX" type="dval">
            $$->ap.x = $?;
        </attribute>
        <attribute name="#AStrY" type="dval">
            $$->ap.y = $?;
        </attribute>
    </element>
    <element name="#EStrBoxData" type="do_box_data">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="dval">
            $$->height = $?;
        </attribute>
    </element>
    <element name="#EStrArcData" type="do_arc_data">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="dval">
            $$->height = $?;
        </attribute>
        <attribute name="#AStrStartAngle" type="dval">
            $$->angle1 = $?;
        </attribute>
        <attribute name="#AStrStopAngle" type="dval">
            $$->angle2 = $?;
        </attribute>
        <attribute name="#AStrFillMode" type="ival">
            $$->fillmode = $?;
        </attribute>
    </element>
    <element name="#EStrLineData" type="do_line_data">
        <!-- Attributes -->
        <attribute name="#AStrLength" type="dval">
            $$->length = $?;
        </attribute>
        <attribute name="#AStrArrowsAt" type="ival">
            $$->arrow_end = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrArrow">
            $$->arrow = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrStringData" type="do_string_data">
        <!-- Attributes -->
        <attribute name="#AStrFontId" type="fontid">
            $$->font = $?;
        </attribute>
        <attribute name="#AStrCharSize" type="dval">
            $$->size = $?;
        </attribute>
        <attribute name="#AStrJustification" type="ival">
            $$->just = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrText">
            $$->s = $?->s;
            xfree($?);
        </child>
    </element>
    <element name="#EStrArrow" type="arrow">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ival">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrLength" type="dval">
            $$->length = $?;
        </attribute>
        <attribute name="#AStrDlFf" type="dval">
            $$->dL_ff = $?;
        </attribute>
        <attribute name="#AStrLlFf" type="dval">
            $$->lL_ff = $?;
        </attribute>
    </element>
    <element name="#EStrSet" type="set">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            /* FIXME */
        </attribute>
        <attribute name="#AStrActive" type="bval">
            $$->hidden = !($?);
        </attribute>
        <attribute name="#AStrType" type="settype">
            $$->type = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrSymbol">
            $$->sym        = $?->type;
            $$->symsize    = $?->size;
            $$->sympen     = $?->line.pen;
            $$->symfillpen = $?->fillpen;
            $$->symlines   = $?->line.style;
            $$->symlinew   = $?->line.width;
            $$->symskip    = $?->skip;
            $$->symchar    = $?->symchar;
            $$->charfont   = $?->charfont;
            xfree($?);
        </child>
        <child name="#EStrLine">
            $$->linet         = $?->type;
            $$->lines         = $?->line.style;
            $$->linew         = $?->line.width;
            $$->linepen       = $?->line.pen;
            $$->filltype      = $?->filltype;
            $$->fillrule      = $?->fillrule;
            $$->setfillpen    = $?->fillpen;
            $$->baseline      = $?->baseline;
            $$->baseline_type = $?->baseline_type;
            $$->dropline      = $?->droplines;
            xfree($?);
        </child>
        <child name="#EStrAnnotation">
            $$->avalue = *($?);
            xfree($?);
        </child>
        <child name="#EStrErrorbar">
            $$->errbar = *($?);
            xfree($?);
        </child>
        <child name="#EStrLegendEntry">
            $$->legstr = $?->s;
            xfree($?);
        </child>
        <child name="#EStrDataset">
            $$->data = $?;
        </child>
    </element>
    <element name="#EStrSymbol" type="symbol">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ival">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        <attribute name="#AStrSkip" type="ival">
            $$->skip = $?;
        </attribute>
        <attribute name="#AStrChar" type="ival">
            $$->symchar = $?;
        </attribute>
        <attribute name="#AStrFontId" type="fontid">
            $$->charfont = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLine" type="setline">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ival">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrFillType" type="ival">
            $$->filltype = $?;
        </attribute>
        <attribute name="#AStrFillRule" type="fillrule">
            $$->fillrule = $?;
        </attribute>
        <attribute name="#AStrBaselineType" type="ival">
            $$->baseline_type = $?;
        </attribute>
        <attribute name="#AStrDrawBaseline" type="bval">
            $$->baseline = $?;
        </attribute>
        <attribute name="#AStrDrawDroplines" type="bval">
            $$->droplines = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrAnnotation" type="annotation">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrType" type="ival">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrAngle" type="dval">
            $$->angle = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            if ($?) {
                $$->offset = *($?);
                xfree($?);
            }
        </attribute>
        <attribute name="#AStrPrepend" type="sval">
            strcpy($$->prestr, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrAppend" type="sval">
            strcpy($$->appstr, $?);
            xfree($?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrFaceSpec">
            $$->size  = $?->size;
            $$->font  = $?->font;
            $$->color = $?->color;
            xfree($?);
        </child>
        <child name="#EStrFormat">
            $$->format = $?->type;
            $$->prec   = $?->prec;
            xfree($?);
        </child>
    </element>
    <element name="#EStrErrorbar" type="errorbar">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrSidePlacement" type="sideplacement">
            $$->ptype = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrBarline">
            $$->barsize = $?->size;
            $$->pen     = $?->line.pen;
            $$->linew   = $?->line.width;
            $$->lines   = $?->line.style;
            xfree($?);
        </child>
        <!-- Child elements -->
        <child name="#EStrRiserline">
            $$->arrow_clip  = $?->arrow_clip;
            $$->cliplen     = $?->clip_length;
            $$->riser_linew = $?->line.width;
            $$->riser_lines = $?->line.style;
            xfree($?);
        </child>
    </element>
    <element name="#EStrBarline" type="barline">
        <!-- Attributes -->
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrRiserline" type="riserline">
        <!-- Attributes -->
        <attribute name="#AStrArrowClip" type="bval">
            $$->arrow_clip = $?;
        </attribute>
        <attribute name="#AStrClipLength" type="dval">
            $$->clip_length = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLegendEntry" type="string">
        <!-- Child elements -->
        <child name="#EStrText">
            xcc_string_set($$, $?->s);
            xcc_string_free($?);
        </child>
    </element>
    <element name="#EStrDataset" type="dataset">
        <!-- Attributes -->
        <attribute name="#AStrCols" type="ival">
            set_dataset_ncols($$, $?);
        </attribute>
        <attribute name="#AStrRows" type="ival">
            set_dataset_nrows($$, $?);
        </attribute>
        <attribute name="#AStrComment" type="sval">
            $$->comment = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrRow">
            dataset_set_datapoint($$, $?, ((ParserData *) $U)->nrow);
            datapoint_free($?);
            ((ParserData *) $U)->nrow++;
        </child>
    </element>
    <element name="#EStrRow" type="datapoint">
        <!-- Attributes -->
        <attribute name="X" type="dval">
            $$->ex[DATA_X] = $?;
        </attribute>
        <attribute name="Y" type="dval">
            $$->ex[DATA_Y] = $?;
        </attribute>
        <attribute name="Y1" type="dval">
            $$->ex[DATA_Y1] = $?;
        </attribute>
        <attribute name="Y2" type="dval">
            $$->ex[DATA_Y2] = $?;
        </attribute>
        <attribute name="Y3" type="dval">
            $$->ex[DATA_Y3] = $?;
        </attribute>
        <attribute name="Y4" type="dval">
            $$->ex[DATA_Y4] = $?;
        </attribute>
        <attribute name="s" type="sval">
            $$->s = $?;
        </attribute>
    </element>

    <!-- Postamble -->
    <postamble><![CDATA[
int load_xgr_project(char *fn)
{
    ParserData udata;
    Project *pr;
    FILE *fp;
    int ret;

    fp = grace_openr(fn, SOURCE_DISK);
    if (fp == NULL) {
	return RETURN_FAILURE;
    }

    udata.axis = -1;
    udata.nrow = -1;
    
    ret = xcc_parse(fp, &udata, (void **) &pr, xcc_start_handler, xcc_end_handler);

    grace_close(fp);
    
    if (ret == XCC_RETURN_SUCCESS) {
        pr->docname = copy_string(pr->docname, fn);
        project_clear_dirtystate(pr);
        project_free(grace->project);
        grace->project = pr;
        
        return RETURN_SUCCESS;
    } else {
        project_free(pr);
        
        return RETURN_FAILURE;
    }
}
    ]]></postamble>
</parser>
