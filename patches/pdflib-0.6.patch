diff -u -r pdflib-0.6/p_basic.c pdflib-0.6e/p_basic.c
--- pdflib-0.6/p_basic.c	Sun May  3 20:40:19 1998
+++ pdflib-0.6e/p_basic.c	Tue Aug  4 02:38:47 1998
@@ -173,10 +173,13 @@
     p->open_outlines	= 0;
     p->image_number	= 0;
     p->outline_count	= 0;
+    
+    p->font_alias_num   = 0;
 
     /* HACK, should use font cache */
     p->current_font	= (pdf_font *) PDF_malloc(sizeof(pdf_font), "PDF_open");
 
+    p->fill_rule        = Winding;
     return p;
 }
 
@@ -472,7 +475,7 @@
 }
 
 pdf_item *
-pdf_add_res_font(PDF *p, char *basename)
+pdf_add_res_font(PDF *p, char *basename, PDF_encoding enc)
 {
     pdf_item *item, **last_item;
 
@@ -495,6 +498,7 @@
     item->basename= (char *) PDF_malloc(strlen(basename)+1, "pdf_add_res_font");
     strcpy(item->basename, basename);
     item->obj_id	= pdf_alloc_id(p);
+    item->enc           = enc;
     item->next		= (pdf_item *) NULL;
 
     *last_item		= item;
diff -u -r pdflib-0.6/p_draw.c pdflib-0.6e/p_draw.c
--- pdflib-0.6/p_draw.c	Sun May  3 20:26:11 1998
+++ pdflib-0.6e/p_draw.c	Tue Aug  4 02:57:05 1998
@@ -180,7 +180,17 @@
 void
 PDF_fill(PDF *p)
 {
-    (void) fputs("f\n", p->fp);
+    switch (p->fill_rule) {
+    case Winding:
+        (void) fputs("f\n", p->fp);
+        break;
+    case EvenOdd:
+        (void) fputs("f*\n", p->fp);
+        break;
+    default:
+        pdf_error(p, PDF_INTERNAL, "Bogus fill rule value in PDF_fill!");
+        return;
+    }
     pdf_end_text(p);
 }
 
@@ -188,13 +198,33 @@
 PDF_fill_stroke(PDF *p)
 {
     pdf_end_text(p);
-    (void) fputs("B\n", p->fp);
+    switch (p->fill_rule) {
+    case Winding:
+        (void) fputs("B\n", p->fp);
+        break;
+    case EvenOdd:
+        (void) fputs("B*\n", p->fp);
+        break;
+    default:
+        pdf_error(p, PDF_INTERNAL, "Bogus fill rule value in PDF_stroke!");
+        return;
+    }
 }
 
 void
 PDF_closepath_fill_stroke(PDF *p)
 {
-    (void) fputs("b\n", p->fp);
+    switch (p->fill_rule) {
+    case Winding:
+        (void) fputs("b\n", p->fp);
+        break;
+    case EvenOdd:
+        (void) fputs("b*\n", p->fp);
+        break;
+    default:
+        pdf_error(p, PDF_INTERNAL, "Bogus fill rule value in PDF_fill_stroke!");
+        return;
+    }
     pdf_end_text(p);
 }
 
@@ -204,5 +234,15 @@
 PDF_clip(PDF *p)
 {
     pdf_end_text(p);
-    (void) fputs("W\n", p->fp);
+    switch (p->fill_rule) {
+    case Winding:
+        (void) fputs("W\n", p->fp);
+        break;
+    case EvenOdd:
+        (void) fputs("W*\n", p->fp);
+        break;
+    default:
+        pdf_error(p, PDF_INTERNAL, "Bogus fill rule value in PDF_clip!");
+        return;
+    }
 }
diff -u -r pdflib-0.6/p_font.c pdflib-0.6e/p_font.c
--- pdflib-0.6/p_font.c	Thu Jun 11 20:57:56 1998
+++ pdflib-0.6e/p_font.c	Sun Jul 19 20:20:55 1998
@@ -163,14 +163,14 @@
     widths = p->current_font->FontWidths;
 
     /* check for afm file */
-    sprintf(filename, "%s.afm", fontname);
+    sprintf(filename, "%s", pdf_get_afm_filename(p, fontname));
 
     /* try current directory */
     afmfile = fopen(filename, "r");
 
     if (afmfile == NULL && p->info->fontpath) {
 	/* try font path if caller supplied one */
-	sprintf(filename, "%s%s%s.afm", p->info->fontpath, PATHSEP, fontname);
+	sprintf(filename, "%s%s%s", p->info->fontpath, PATHSEP, pdf_get_afm_filename(p, fontname));
 	afmfile = fopen(filename, "r");
     }
     if (afmfile == NULL) {
@@ -270,7 +270,7 @@
 }
 
 void
-pdf_put_t1font(PDF *p, char *fontname, id font_id, int fontnumber, bool embed)
+pdf_put_t1font(PDF *p, char *fontname, PDF_encoding enc, id font_id, int fontnumber, bool embed)
 {
     FILE	*fontfile = NULL;
     char	filename[MAXFILENAME];
@@ -282,9 +282,6 @@
     long	length, stream_start;
     PDF_data_source t1src;
     const char	**cp;
-    PDF_encoding enc;
-
-    enc		= p->current_font->encoding;
 
     /* Should use font cache instead */
     if (!pdf_read_afm(p, fontname, enc)) {	/* HACK */
@@ -317,14 +314,14 @@
 	}
 
     /* check for font file */
-    strcpy(filename, fontname);
+    strcpy(filename, pdf_get_type1_filename(p, fontname));
     if (embed) {
 	/* try current directory */
 	fontfile = fopen(filename, "r");
 
 	if (fontfile == NULL && p->info->fontpath) {
 	    /* try font path if caller supplied one */
-	    sprintf(filename, "%s%s%s", p->info->fontpath, PATHSEP, fontname);
+	    sprintf(filename, "%s%s%s", p->info->fontpath, PATHSEP, pdf_get_type1_filename(p, fontname));
 	    fontfile = fopen(filename, "r");
 	}
 	if (fontfile == NULL) {
@@ -479,4 +476,43 @@
 	fclose(((t1_private_data *) t1src.private_data)->fontfile);
 	PDF_free((void *) t1src.private_data);
     }
+}
+
+void PDF_add_font_alias(PDF *p, char *alias, char *afm, char *type1)
+{
+    strncpy(p->font_aliases[p->font_alias_num].alias, alias, MAX_ALIAS_LENGTH - 1);
+    strncpy(p->font_aliases[p->font_alias_num].afm, afm, MAX_ALIAS_LENGTH - 1);
+    strncpy(p->font_aliases[p->font_alias_num].type1, type1, MAX_ALIAS_LENGTH - 1);
+    p->font_alias_num++;
+}
+
+char *pdf_get_afm_filename(PDF *p, char *fontname)
+{
+    int i;
+    static char buf[MAX_ALIAS_LENGTH];
+    
+    for (i = 0; i < p->font_alias_num; i++) {
+        if (strcmp((p->font_aliases[i].alias), fontname) == 0) {
+            return(p->font_aliases[i].afm);
+        }
+    }
+    
+    /* fallback */
+    strncpy(buf, fontname, MAX_ALIAS_LENGTH - 1);
+    strncat(buf, ".afm", MAX_ALIAS_LENGTH - 1);
+    return(buf);
+}
+
+char *pdf_get_type1_filename(PDF *p, char *fontname)
+{
+    int i;
+    
+    for (i = 0; i < p->font_alias_num; i++) {
+        if (strcmp((p->font_aliases[i].alias), fontname) == 0) {
+            return(p->font_aliases[i].type1);
+        }
+    }
+    
+    /* fallback */
+    return(fontname);
 }
diff -u -r pdflib-0.6/p_gstate.c pdflib-0.6e/p_gstate.c
--- pdflib-0.6/p_gstate.c	Thu Jun 11 21:17:54 1998
+++ pdflib-0.6e/p_gstate.c	Tue Aug  4 02:29:12 1998
@@ -173,3 +173,14 @@
     pdf_end_text(p);
     (void) fprintf(p->fp,"%s w\n", pdf_float(width));
 }
+
+void PDF_setfillrule(PDF *p, PDF_fillrule rule)
+{
+    if (rule < 0 || rule >= fillrule_count) {
+	pdf_error(p, PDF_WARN, 
+	    "Bogus fill rule value in PDF_setfillrule - ignored!");
+        return;
+    }
+    
+    p->fill_rule = rule;
+}
diff -u -r pdflib-0.6/p_intern.h pdflib-0.6e/p_intern.h
--- pdflib-0.6/p_intern.h	Sun May  3 21:40:15 1998
+++ pdflib-0.6e/p_intern.h	Tue Aug  4 02:13:09 1998
@@ -20,6 +20,9 @@
 #define MAX_PAGES 	100
 #endif
 
+#define MAX_ALIASES     100             /* maximum number of font aliases */
+#define MAX_ALIAS_LENGTH 32             /* maximum length of font aliases */
+
 typedef enum { ImageB = 1, ImageC = 2, ImageI = 4, Text = 8 } pdf_procset;
 
 typedef enum { 
@@ -71,6 +74,7 @@
 struct pdf_item_s {
     char	*name;
     char	*basename;
+    int         enc;
     id		obj_id;
     pdf_item	*next;
 };
@@ -94,6 +98,12 @@
     char 	*text;		/* bookmark text */
 } pdf_outline;
 
+typedef struct {
+    char alias[MAX_ALIAS_LENGTH];
+    char afm[MAX_ALIAS_LENGTH];
+    char type1[MAX_ALIAS_LENGTH];
+} pdf_font_alias;
+
 struct PDF_s {
     FILE	*fp;
 
@@ -116,6 +126,10 @@
     int		outline_count;			/* HACK */
     pdf_outline	outlines[MAX_PAGES];		/* HACK */
 
+    /* font aliases */
+    int		font_alias_num;
+    pdf_font_alias font_aliases[MAX_ALIASES];
+    
     /* page specific stuff */
     id		res_id;
     id		contents_length;
@@ -134,6 +148,9 @@
 
     /* general graphics state */
     /* NYI */
+    
+    /* fill rule (winding/even-odd) */
+    PDF_fillrule        fill_rule;
 
     /* text state */
     float	char_spacing;
@@ -154,7 +171,7 @@
 void	pdf_error(PDF *, int level, const char *fmt, ...);
 id	pdf_begin_obj(PDF *p, id obj_id);
 id	pdf_alloc_id(PDF *p);
-pdf_item *pdf_add_res_font(PDF *p, char *basename);
+pdf_item *pdf_add_res_font(PDF *p, char *basename, PDF_encoding enc);
 void	pdf_add_res_xobject(PDF *p, id xobj_id);
 
 /* p_text.c */
@@ -174,7 +191,9 @@
 
 /* p_font.c */
 bool pdf_read_afm(PDF *p, char *fontname, PDF_encoding enc);
-void pdf_put_t1font(PDF *p, char *fontname, id font_id, int fontnumber, bool embed);
+void pdf_put_t1font(PDF *p, char *fontname, PDF_encoding enc, id font_id, int fontnumber, bool embed);
+char *pdf_get_type1_filename(PDF *p, char *fontname);
+char *pdf_get_afm_filename(PDF *p, char *fontname);
 
 /* p_util.c */
 char	*pdf_float(float f);
diff -u -r pdflib-0.6/p_port.h pdflib-0.6e/p_port.h
--- pdflib-0.6/p_port.h Sat Jun 20 15:29:32 1998
+++ pdflib-0.6e/p_port.h        Thu Mar 18 01:01:04 1999
@@ -10,7 +10,9 @@
 /* ---------------------- Windows -------------------*/
 #ifdef _WIN32
 #define WIN32
+#ifndef __CYGWIN32__
 #define PDF_HAS_BOOL
+#endif
 #endif

 #ifdef WIN32
diff -u -r pdflib-0.6/p_text.c pdflib-0.6e/p_text.c
--- pdflib-0.6/p_text.c	Sun May  3 20:26:11 1998
+++ pdflib-0.6e/p_text.c	Sun Jul 19 17:55:21 1998
@@ -67,7 +67,7 @@
     /* output pending font objects */
     for (item = p->res.font; item != (pdf_item *) NULL; item = item->next) 
     {
-	pdf_put_t1font(p, item->basename, item->obj_id, index++, true);
+	pdf_put_t1font(p, item->basename, item->enc, item->obj_id, index++, true);
     }
 }
 
@@ -78,7 +78,7 @@
 {
     pdf_item	*item;
 
-    item = pdf_add_res_font(p, fontname);
+    item = pdf_add_res_font(p, fontname, enc);
 
     pdf_begin_text(p);
     (void) fprintf(p->fp, "%s %s Tf\n", item->name, pdf_float(fontsize));
diff -u -r pdflib-0.6/pdf.h pdflib-0.6e/pdf.h
--- pdflib-0.6/pdf.h	Wed Jul  8 16:32:59 1998
+++ pdflib-0.6e/pdf.h	Tue Aug  4 02:59:59 1998
@@ -62,6 +62,11 @@
     colorspace_count
 } PDF_colorspace;
 
+typedef enum {
+    Winding, EvenOdd,
+    fillrule_count
+} PDF_fillrule;
+
 typedef byte pdf_colormap[256][3];
 
 typedef struct PDF_s PDF;
@@ -208,6 +213,7 @@
 void PDF_setlinecap(PDF *p, byte cap);
 void PDF_setmiterlimit(PDF *p, float miter);
 void PDF_setlinewidth(PDF *p, float width);
+void PDF_setfillrule(PDF *p, PDF_fillrule rule);
 
 /* p_color.c */
 /* do not use color operators within path objects */
@@ -260,6 +266,7 @@
 
 /* p_font.c */
 float PDF_stringwidth(PDF *p, byte *text);
+void PDF_add_font_alias(PDF *p, char *alias, char *afm, char *type1);
 
 /* p_hyper.c */
 void PDF_add_outline(PDF *p, char *text);
