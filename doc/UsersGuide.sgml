<!doctype linuxdoc system>

<!-- This is the User's Guide for Grace -->


<article>

<title>Grace User's Guide (v0.3)
<author>by the Grace Team
<date>04.08.1999
<abstract>
  This document explains the usage of
  <bf/Grace/, a 2D plotting tool for scientific data.
</abstract>

<toc>

<!-- **************************************** -->
<sect>Introduction
<p>

<sect1>What is Grace?
  <p>
     Grace is a tool to make two-dimensional plots of scientific
     data. It runs under various (if not all) flavours of UNIX with
     X11 and Motif (LessTif). It also runs under VMS, OS/2, and Windows
     (95/98/NT). Its capabilities are roughly similar to GUI-based
     programs like Sigmaplot or Microcal Origin plus script-based
     tools like Gnuplot or Genplot.  Its strength lies in the fact
     that it combines the convenience of a graphical user interface
     with the power of a scripting language which enables it to do
     sophisticated calculations or perform automated tasks.

     Grace is derived from Xmgr (a.k.a. ACE/gr), originally written by <url
     name="Paul Turner" url="mailto:pturner@teleport.com">.

     From version number 4.00, the development was taken over by a
     team of volunteers under the coordination of <url name="Evgeny
     Stambulchik" url="mailto:fnevgeny@plasma-gate.weizmann.ac.il">.
     You can get the newest information about Grace and download the
     latest version at the <url
     url="http://plasma-gate.weizmann.ac.il/Grace/"
     name="Grace home page">.

     When its copyright was changed to GPL, the name was changed to Grace,
     which stands for ``GRaphing, Advanced Computation and Exploration of
     data'' or ``Grace Revamps ACE/gr''. The first version of Grace available
     is named 5.0.0, while the last public version of Xmgr has the version
     number 4.1.2.

     Paul still maintains and develops a non-public version of Xmgr for
     internal use.

<sect1>Copyright statement
  <p>

<tscreen><verb>
Copyright (&copy;) 1991-95 Paul J Turner, Portland, OR
Copyright (&copy;) 1996-99 Grace Development Team

Maintained by Evgeny Stambulchik


                         All Rights Reserved

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</verb></tscreen>


<sect1>Comments and bug reports
  <p>


<!-- **************************************** -->
<sect>Installation guide
  <p>

  <sect1>Installing from sources
    <p>
      <enum>
        <item> Configuration <label id="configuration">
        <itemize>
          <item> Extra libraries. Some features will be available only if
                 additional libraries are installed. Those are:
            <itemize>
              <item> The PDF driver requires the PDFlib-2.01 library of Thomas
                     Merz to be installed, which is available
                     <url name="here" url="http://www.ifconnection.de/~tm/pdflib/">.
              <item> The JPEG backend needs
                     the IJG's (<url name="JPEG library" url="ftp://ftp.uu.net/graphics/jpeg/">).
              <item> The PNG backend needs
                     the (<url name="libpng" url="http://www.cdrom.com/pub/png/">) library.
              <item> If your computer has the FFTW library installed when
                     Grace is compiled, Grace will link itself to this, and
                     drop all conventional FFT's and DFT's. All transforms
                     will be routed through this package. Note that there is
                     then no difference between pushing the "FFT" button and
                     the "DFT" button, except that FFT will complain if the
                     length isn't a power of 2, and DFT will not.

                     For more information on this package, see the 
                     <url name="FFTW Home page" url="http://theory.lcs.mit.edu/~fftw/">.
                     In short, this package allows one to do non-power-of-2
                     length FFT's along with the normal ones.  It seems to work
                     very efficiently for any set length which factors into 2^a
                     3^b 5^c 7^d for integer a, b, c, d. The great feature here
                     is that set lengths which are powers of 10 (e.g. 1000,
                     10000) and integer multiples of these (500, 2000, 2500,
                     5000, etc.) can be computed with no significant penalty
                     (maybe 20%) over power-of-2 transforms. Very often, real
                     datasets come in these sizes, and not in powers of 2.
              <item> In order to read/write sets in the NetCDF data format, you
                     will also need the <url name="NetCDF libraries"
                     url="http://unidata.ucar.edu/packages/netcdf/index.html">.
            </itemize>
          <item> Consult README.configure for basic notes on the GNU configure
                 usage
          <item> Run <tt>./configure --help</tt>
                 to get list of additional switches specific to Grace
          <item> Run <tt>./configure &lt;options&gt;</tt>. Just an example:
                 <verb>
  % ./configure --enable-grace-home=/opt/grace 
  --enable-extra-incpath=/usr/local/include:/opt/include \
  --enable-extra-ldpath=/usr/local/lib:/opt/lib --prefix=/usr
                 </verb>
                 would use <tt>/usr/local/include</tt> and
                 <tt>/opt/include</tt> in addition to the default include path
                 and <tt>/usr/local/lib</tt> and <tt>/opt/lib</tt> in addition
                 to the default ld path. As well, all stuff would be put under
                 the /opt/grace directory and soft links made to
                 <tt>/usr/bin</tt>, <tt>/usr/lib</tt> and <tt>/usr/include</tt>.
                   <p>
                 <bf>Note</bf>: If you change one of the
                 <tt>--enable-extra-incpath</tt> or
                 <tt>--enable-extra-ldpath</tt> options from one run of
                 configure to another, remember to delete the
                 <tt>config.cache</tt> file!!!
        </itemize>
        <item> Compilation
        <itemize>
          <item> Issue <tt>make</tt>
                   <p>
                 If something goes wrong, try to see if the problem has been
                 described already in the <bf>Grace FAQ</bf> (in the
                 <tt>doc</tt> directory).
        </itemize>
        <item> Testing
    
        <itemize>
          <item> <tt>make tests</tt>
        </itemize>
        <item> Installation
        <itemize>
          <item> <tt>make install</tt>
          <item> <tt>make links</tt>
                   <p>
                 The later (optional) step will make soft links from some files
                 under the Grace home directory to the system-wide default
                 locations (can be changed by the <tt>--prefix</tt> option
                 during the configuration, see above).
        </itemize>
      </enum>

  <sect1>Binary installation
    <p>
       <enum>
       <item> Getting pre-built packages
       <item> Installation
       <item> Running tests
       </enum>

  <sect1>Alternative packaging schemes (RPM, ...)
    <p>
      
      Not written yet...


<!-- **************************************** -->
<sect>Getting started
  <p>

  For a jump-in start, you can run the demos using the script
  <tt>GRACE&lowbar;HOME/examples/dotest</tt>. You can also read the
  <url name="Tutorial" url="Tutorial.html">.

  <sect1>General concepts
    <p>

      <sect2>Project files <label id="project-file">
	<p>

          A project file contains all information necessary to restore a plot
          created by Grace, as well as some of preferences. Each plot is
          represented on a single page, but may have an unlimited number of
          graphs.

      <sect2>Graphs <label id="graph">
	<p>

          A graph consists of (every element is optional): a graph frame, axes,
          a title and a subtitle, a number of sets and additional annotative
          objects (time stamp string, text strings, lines, boxes and ellipses).

      <sect2>Sets <label id="sets">
	<p>

	  A set is a way of representing numerical data (datasets). It consists
          of a pointer to a dataset plus a collection of parameters describing
          the visual appearance of the data (like color, line dash pattern etc).

      <sect2>Datasets <label id="datasets">
	<p>

          A dataset is a collection of points with x and y coordinates, up to
          four optional data values (which, depending on the set type, can be
          displayed as error bars or like) and one optional character string.

      <sect2>Regions <label id="regions">
	<p>

          Regions are sections of the graph defined by the interior or exterior
          of a polygon, or a half plane defined by a line. Regions are used to
          restrict data transformations to a geometric area occupied by region.

      <sect2>Real Time Input <label id="RTI">
	<p>

          Real Time Input refers to the ability Grace has to be
          fed in real time by an external program. The Grace
          process spawned by the driver program is a full featured
          Grace process : the user can interact using the GUI at the
          same time the program sends data and commands. The process
          will adapt itself to the incoming data rate.

      <sect2>Hotlinks <label id="hotlinks">
	<p>

          Hotlinks are sources containing varying data. Grace can be
          instructed a file or a pipe is a hotlink in which case it
          will provide specific commands to refresh the data on a
          mouseclick (a later version will probably allow automatic
          refresh).

      <sect2>File formats <label id="files-formats">
	<p>

          Grace understands several input files formats. The most
          basic one is ASCII text files containing space and comma
          separated columns of data. The data fields can be either
          numeric (fortran 'd' and 'D' exponant markers are supported)
          or alphanumeric (with or without quotes). Several calendar
          date formats are recognized automatically and you can
          specify your own reference for numeric dates formats. You
          can select several fields upon reading and even concatenate
          several fields into one (see <ref id="field-selection"
          name="field selection"> in the GUI description). Grace also
          has a command language (see <ref id="command-interpreter"
          name="command interpreter">), you can include commands in
          data files using lines having "@" as their first non-blank
          character. Depending on configuration, Grace can also read
          NetCDF files (see <ref id="configuration"
          name="configuration">).

      <sect2>Devices<label id="devices">
	<p>
          Grace allows the user to choose between several output
          devices to produce its graphics. The current list of
          supported devices is :

          <itemize>
          <item> X11
          <item> PostScript (level 1 and level 2)
          <item> EPS
          <item> Metafile (which is Grace format)
          <item> PDF
          <item> PNM
          <item> JPEG
          <item> PNG
          </itemize>

        <p>
          Note the Grace does not support GIF anymore due to
           the copyright policy of Unisys. Grace can also be
           instructed to launch conversion programs automatically
           based on file name. As an example you can produce MIF
           (FrameMaker Interchange Format) or Java applets using
           pstoedit, or almost any image format using the netpbm suite
           (see the <url name="FAQ" url="FAQ.html">).

      <sect2>Magic path<label id="magic-path">
	<p>

          In many cases, when Grace needs to access a file given with a
          relative <tt>pathname</tt>, it searches for the file along the
          following path:
          <tt>./pathname:./.grace/pathname:~/.grace/pathname:$GRACE_HOME/pathname</tt>

  <sect1>Invocation
    <p>

      <sect2>Operational mode
        <p>

	  With respect to the user interface, there are three modes of
          operation that Grace can be invoked in. The full-featured
	  GUI-based version is called <tt/xmgrace/. A batch-printing
	  version is called <tt/gracebat/. A command-line interface mode
          is called <tt/grace/. Usually, a single executable is called in all
          cases, with two of the three files being (symbolic) links to a
          "real" one.

      <sect2>Command line options
        <p>
          <descrip>
          <tag> -arrange <it>rows</it> <it>cols</it> </tag>
                Arrange the graphs in a grid rows by cols

          <tag> -autoscale <it>x|y|xy</it> </tag>
                Override any parameter file settings

          <tag> -batch <it>batch_file</it> </tag>
                Execute batch_file on start up

          <tag> -block <it>block_data</it> </tag>
                Assume data file is block data

          <tag> -bxy <it>x:y:etc.</it> </tag>
                Form a set from the current block data set using the current set
                type from columns given in the argument

          <tag> -cols <it>gcols</it> </tag>
                Arrange graphs in gcols columns

          <tag> -datehint <it>iso|european|us|days|seconds|nohint</it> </tag>
                Set the hint for dates analysis

          <tag> -dpipe <it>descriptor</it> </tag>
                Read data from descriptor (anonymous pipe) on startup

          <tag> -fixed <it>width</it> <it>height</it> </tag>
                Set canvas size fixed to width*height

          <tag> -free </tag> Use free page layout

          <tag> -graph <it>graph_number</it> </tag>
                Set the current graph number

          <tag> -graphtype <it>graph_type</it> </tag>
                Set the type of the current graph

          <tag> -hardcopy </tag>
                No interactive session, just print and quit

          <tag> -hdevice <it>hardcopy_device_name</it> </tag>
                Set default hardcopy device

          <tag> -install </tag>
                Install private colormap

          <tag> -legend <it>load</it> </tag>
                Turn the graph legend on

          <tag> -log <it>x|y|xy</it> </tag>
                Set the axis scaling of the current graph to logarithmic

          <tag> -logwindow </tag>
                Open the log window

          <tag> -mono </tag>
                Run Grace in monochrome mode (affects the display only)

          <tag> -noask </tag>
                Assume the answer is yes to all requests - if the operation would
                overwrite a file, Grace will do so without prompting

          <tag> -noinstall </tag>
                Don't use private colormap

          <tag> -nologwindow </tag>
                No log window, overrides resource setting

          <tag> -noprint </tag>
                In batch mode, do not print

          <tag> -nosigcatch </tag>
                Don't catch signals

          <tag> -npipe <it>file</it> </tag>
                Read data from named pipe on startup

          <tag> -nxy <it>nxy_file</it> </tag>
                Assume data file is in X Y1 Y2 Y3 ... format

          <tag> -param <it>parameter_file</it> </tag>
                Load parameters from parameter_file to the current graph

          <tag> -pexec <it>parameter_string</it> </tag>
                Interpret string as a parameter setting

          <tag> -pipe </tag>
                Read data from stdin on startup

          <tag> -printfile </tag> <it>file</it>
                Save print output to file

          <tag> -remove </tag>
                Remove data file after read

          <tag> -results <it>results_file</it> </tag>
                Write the results from regression to results_file

          <tag> -rows <it>grows</it> </tag>
                Arrange graphs in grows rows

          <tag> -rvideo </tag>
                Exchange the color indices for black and white

          <tag> -saveall <it>save_file</it> </tag>
                Save all graphs to save_file

          <tag> -seed <it>seed_value</it> </tag>
                Integer seed for random number generator

          <tag> -source <it>disk|pipe</it> </tag>
                Source type of next data file

          <tag> -timer <it>delay</it> </tag>
                Set allowed time slice for real time inputs to delay ms

          <tag> -timestamp </tag> Add timestamp to plot

          <tag> -settype <it>xy|xydx|...</it> </tag>
                Set the type of the next data file

          <tag> -version </tag>
                Show the program version

          <tag> -viewport <it>xmin ymin xmax ymax</it> </tag>
                Set the viewport for the current graph

          <tag> -wd <it>directory</it> </tag>
                Set the working directory

          <tag> -world <it>xmin ymin xmax ymax</it> </tag>
                Set the world coordinates for the current graph

          <tag> -usage|-help </tag>
                This message
 
          </descrip>

  <sect1>Customization
    <p>
    <sect2>Environment variables
      <p>
        <itemize>
        <item> GRACE&lowbar;HOME
               <p>
               Set the location of Grace. This will be where help files,
               auxiliary programs, and examples are located. If you are unable
               to find the location of this directory, contact your system
               administrator.
               <p>
        <item> GRACE&lowbar;PRINT&lowbar;CMD
               <p>
               Print command. If the variable is defined but is an empty
               string, "Print to file" will be selected as default.
               <p>
        <item> GRACE&lowbar;EDITOR
               <p>
               The editor used for manual editing of dataset values.
               <p>
        <item> GRACE&lowbar;HELPVIEWER
               <p>
               The HTML viewer for on-line browsing of help documents
               <p>
        <item> GRACE&lowbar;FFTW&lowbar;WISDOM&lowbar;FILE and
               GRACE&lowbar;FFTW&lowbar;RAM&lowbar;WISDOM
               <p>
               These flags control behavior of the FFTW planner (see
               README.FFTW for detailed info)
               <p>
        </itemize>
    
    <sect2>Init file<label id="gracerc">
      <p>
        Upon start-up, Grace loads its init file, <tt>gracerc</tt>. The file
        is searched for in the magic path (see
        <ref id="magic-path" name="magic path">); once found, the rest of the
        path is ignored. It's recommended that in the <tt>gracerc</tt> file,
        one doesn't use statements which are part of a project file - such
        defaults, if needed, should be set in the default template (see 
        <ref id="default-template" name="default template">).

    <sect2>Default template<label id="default-template">
      <p>
        Whenever a new project is started, Grace loads the default template,
        <tt>templates/Default.agr</tt>. The file is searched for in the magic
        path (see  <ref id="magic-path" name="magic path">); once found, the
        rest of the path is ignored. It's recommended that in the default
        template, one doesn't use statements which are NOT part of a project
        file - such defaults, if needed, should be set in the
        <tt>gracerc</tt> (see <ref id="gracerc" name="init file">).

    <sect2>X resources
      <p>

        The following Grace-specific X resource settings are supported:

        <itemize>
        <item> XMgrace.invertDraw
               <newline>
               Use GXinvert rather than GXxor for rubberband lines.
               If the rubberbanding for zooms and lines, etc. doesn't
               appear on the canvas, set this resource to yes.
               <newline>

        <item> XMgrace.allowDoubleClick

               <newline>
               When Yes, allow double clicks on the canvas to bring up various
               popups depending on  the location of the pointer when the double
               click occurs.
               <newline>

        <item> XMgrace.toolBar
               <newline>
               Enables button toolbar
               <newline>

        <item> XMgrace.statusBar
               <newline>
               Enables status bar
               <newline>

        <item> XMgrace.locatorBar
               <newline>
               Enables locator bar
               <newline>

       </itemize>


        It is also possible to customize menus by assigning key accelerators to
        any item.

        You'll need to derive the item's X resource name from the respective
        menu label, which is easily done following these rules:
        <itemize>
          <item> All non-alphanumeric characters are skipped
          <item> Start with lower case; each new word (if any) continues from
                 the capital letter
          <item> Add the item's type to the end - "Menu" for pulldown menus,
                 "Button" for menu buttons.
        </itemize>
        
        For example, in order to make Grace popup the Non-linear curve fitting
        by pressing Control+F, you would add the following two lines

        <tt>
          XMgrace*transformationsMenu.nonLinearCurveFitttingButton.acceleratorText: Ctrl+F
          <newline>
          XMgrace*transformationsMenu.nonLinearCurveFitttingButton.accelerator: Ctrl&lt;Key&gt;f
        </tt>


        to your <tt>.Xresources</tt> file (the file which is read when an X
        session starts; it could be <tt>.Xdefaults</tt>, <tt>.Xsession</tt> or
        some other file - ask your system administrator when in doubt). 

<!-- **************************************** -->
<sect>Guide to menus and popups
<p>

(Not finished yet... Read the <url name="Tutorial" url="Tutorial.html"> as well).

   <sect1> File menu <label id="file-menu">
   <p>
   The file menu contains all entries related to the input/output features of Grace.

      <sect2> New <label id="new">
      <p>
      Reset the state of Grace as if it had just started (one empty
      graph ranging from 0 to 1 along both axises). If some work has
      been done and not yet saved, a warning popup is displayed to
      allow cancelling the operation.

      <sect2> Open <label id="open">
      <p>
      Open an existing <ref id="project-file" name="project file">. A
      popup is displayed that allow to browse the filesystem.

      <sect2> Save <label id="save">
      <p>
      Save the current work in a project file, using the name that was
      used for the last open or save. If no name has been set (i.e.,
      if the project has been created from scratch) act as <ref
      id="save-as" name="save as">.

      <sect2> Save as <label id="save-as">
      <p>
      Save the current work in a project file with a new name. A popup
      allows to browse the filesystem and set the name and the format
      to use for saving data points (the default value is "%16.8g"). A
      warning is displayed if a file with the same name already
      exists.

      <sect2> Revert to saved <label id="revert-to-saved">
      <p>
      Abandon all modifications performed on the project since the
      last save. A confirmation popup is fired to allow the user
      cancelling the operation.

      <sect2> Describe <label id="describe">
      <p>
      Open an editable text panel where you can store (or read) a
      description of the project.

      <sect2> Read menu <label id="read-menu">
      <p>
         <sect3> Sets <label id="read-sets">
         <p>
         Read new sets of data in a graph. A <ref id="graph-selector"
         name="graph selector"> is used to specify the graph where the
         data should go (except when reading block data, which are
         copied to graphs later-on).

         Reading as "Single set" means that if the source contains
         only one column of numeric data, one set will be created
         using the indices (from 1 to the total number of points) as
         abscissas and read values as ordinates and that if the source
         contains more than one column of data, the first two numeric
         columns will be used. Reading as "NXY" means that the first
         numeric column will provide the abscissas and all remaining
         columns will provide the ordinates of several sets. Reading
         as "Block data" means all column will be read and stored and
         that another popup will allow to select the abscissas and
         ordinates at will. It should be noted that block data are
         stored as long as you do not override them by a new read. You
         can still retrieve data from a block long after having closed
         all popups, using the <ref id="set-selector" name="set
         selector">.

         The set type can be any of :
         <itemize>
            <item> XY
            <item> XYDX
            <item> XYDY
            <item> XYDXDX
            <item> XYDYDY
            <item> XYDXDY
            <item> XYDXDXDYDY
            <item> BAR
            <item> BARDY
            <item> BARDYDY
            <item> XYHILO
            <item> XYZ
            <item> XYR
         </itemize>

         The data source can be selected as "Disk" or "Pipe". In the
         first case the text in the "Selection" field is considered to
         be a file name (it can be automatically set by the file
         selector at the top of the popup). In the latter case the
         text is considered to be a command which is executed and
         should produce the data on its standard output. On systems
         that allows is, the command can be a complete sequence of
         programs glued together with pipes.

         The "Fields"<label id="field-selection"> entry allows you to
         select some of the fields you want. The default value is "*"
         to select all fields (the same effect is achieved using an
         empty entry). Apart from these special values, the syntax to
         use is a colon separated list of fields numbers, ranges, or
         concatenation sequences. A range is specified like this "1~5"
         and a concatenation sequence like this "9&7&8". Beware that
         fields are joined with intervening spaces! Concatenation is
         mainly useful when your input files contains calendar dates
         scattered in several columns.

         If the source contains date fields, they should be
         automatically detected. Several formats are recognized (see
         appendix <ref id="dates" name="dates in grace">). Calendar
         dates are converted to numerical dates upon reading. The user
         can give an hint about the format ("ISO8601", "european",
         "us") using the "Dates hint" choice or let Grace find the
         format by itself.

         <sect3> NetCDF <label id="read-netCDF">
         <p>
         This entry exists only if Grace has been installed with
         support for the NetCDF data format (see <ref
         id="configuration" name="configuration">).

         <sect3> Parameters <label id="read-parameters">
         <p>
         Retrieve settings previously saved.

      <sect2> Write menu <label id="write-menu">
      <p>
         <sect3> Sets <label id="write-sets">
         <p>
         Save data sets in a file. A <ref id="set-selector" name="set
         selector"> is used to specify the set to be saved. The format
         to use for saving data points can be specified (the default
         value is "%16.8g"). A warning is displayed if a file with the
         same name already exists.

         <sect3> Parameters <label id="write-parameters">
         <p>
         Save the parameters either for only the current graph or for
         all graphs.

      <sect2> Print <label id="print">
      <p>
      Print the project using the current printer settings

      <sect2> Device setup <label id="device-setup">
      <p>
      Set the properties of the printing device. Each device has its
      own set of specific options (for example the PostScript device
      allows to choose between grayscale or PostScript level 2 output
      and to change the page offset in case the printer is
      shifted). According to the device, the output can be sent either
      directly to a printer or directed to a file. The global settings
      available for all devices are the sizing parameters.

      <sect2> Exit <label id="exit">
      <p>
      Exit from Grace. If some work has been done and not saved, a
      warning popup will be displayed to allow the user to cancel the
      operation.

   <sect1> Edit menu <label id="edit-menu">
   <p>
      <sect2> Data sets <label id="data-sets">
      <p>
      Open the data set popup where you can view or change the
      properties of datasets. This include its type, length,
      associated comment and main some statistics (min, max, mean,
      standard deviation). An horizontal scrollbar at bottom alloaws
      to get the two last properties, they are not displayed by
      default. Also note that if you find some columns are two narrow
      to show all significant digits, you can drag the vertical rules
      using Shift-Button 2.

      <sect2> Set operations <label id="set-operations">
      <p>
      The set operations popup allows you to interact with sets as a
      whole (and not data within the sets). The popup allows you to
      select a source (one set within one graph) and a destination and
      perform some action upon them (copy, move, swap). This popup
      also give you a quick access to several graph and set selectors
      if you want to perform some other operation like hiding a graph
      or creating a new set from block data.

      <sect2> Arrange graphs <label id="arrange-graphs">
      <p>
      This entry fires up a popup to lay out sevral graphs in a
      regular grid given rows and columns. The graphs can be packed
      together (either horizontally or vertically). New graphs are
      created if needed. An important note is that reducing the number
      of graphs neve delete any grahps! If you select a 6 by 3 grid
      and then reduce it to 5 by 3, you will still have 18 graphs on
      your screen, three of them looking strange in the middle of the
      other ones. This is a security feature that prevent you from
      losing data accepting too quickly a wrong setting. If you really
      wan to get rid of some of the graphs, you should hide or kill
      them using any graph selector you can find around (for example
      in the set operations presented above).

      If you don't want the regular layout this arrangement gives you,
      you can change it afterwards using the mouse (select a graph and
      double click on the focus marker, see <ref id="clicks"
      name="clicks and double clicks">).

      <sect2> Overlay graphs <label id="overlay-graphs">
      <p>
      You can also overlay a graph on top of another one. The main use
      of this feature is to plot several curves using different scales
      on the same (apparently) graph. The main difficulty is to be
      sure you operate on the graph you want at all times (you can
      hide one for a moment if this becomes too difficult).

      <sect2> Autoscale <label id="autoscale">
      <p>
      Using this entry, you can autoscale one graph or all graphs
      according to the specified sets only. This is useful if you need
      either to have truly comparable graphs despite every one
      contains data of different ranges, or if you want to focus your
      attention on one set only while it is displayed with other data
      in a complex graph.

      <sect2> Regions menu <label id="regions-menu">
      <p>
         <sect3> Status <label id="status">
         <p>
         This small popup only display the current state (type and
         wether it is active or not) of the existing regions.

         <sect3> Define <label id="define">
         <p>
         You can define a new region (or redefine an existing one),
         the allowed region types are :

         <itemize>
         <item> Inside polygon
         <item> Outside polygon
         <item> Above line
         <item> Below line
         <item> Left of line
         <item> Right of line
         <item> In horizontal range
         <item> In vertical range
         <item> Out of horizontal range
         <item> Out of vertical range
         </itemize>

         A region can be either linked to the current graph only or to
         all graphs.

         <sect3> Clear <label id="clear">
         <p>
         This allows to disable a region.

         <sect3> Report on <label id="report-on">
         <p>
         This popup reports you which sets or points are inside or
         outside of a region.

      <sect2> Hot links <label id="hot-links">
      <p>
      You can link a set to a file or a pipe using this feature. Once
      a link has been established, you can update it (i.e., read data
      again) by clicking on the update button. If you have specified a
      command (using grace language) in the corresponding text field
      of the popup, it will be executed after each update. Note that
      you can use several commands separated by ';' characters.

      <sect2> Set locator fixed point <label id="set-locator-fixed-point">
      <p>
      After having selected this menu entry, you can select a point on
      a graph that will be used as the origin of the locator display
      (just below the menu bar).

      <sect2> Clear locator fixed point <label id="clear-locator-fixed-point">
      <p>
      This entry is provided to remove a fixed point set before and
      use the default again : point [0, 0].

      <sect2> Locator props <label id="locator-props">
      <p>
      The locator props popup allows you to customize the display of
      the locator, mainly its type and the format and precision of the
      display. You can use all the formats that are allowed in the
      graphs scales.

      <sect2> Preferences <label id="preferences">
      <p>
      The preferences popup allows you to set miscellaneous properties
      of your grace session, such as debugging level, GUI behaviour,
      cursor type, date reading hint and reference date used for
      calendar conversions.

   <sect1> Data menu <label id="data-menu">
   <p>
      <sect2> Data set operations <label id="data-set-operations">
      <p>
      <sect2> Region operations menu <label id="region-operations-menu">
      <p>
         <sect3> Extract sets <label id="extract-sets">
         <p>
         <sect3> Kill sets <label id="kill-sets">
         <p>
         <sect3> Report on <label id="report-on">
         <p>
      <sect2> Transformations menu <label id="transformations-menu">
      <p>
         <sect3> Evaluate expression <label id="evaluate-expression">
         <p>
         <sect3> Evaluate in region <label id="evaluate-in-region">
         <p>
         <sect3> Histograms <label id="histograms">
         <p>
         <sect3> Fourier transforms <label id="fourier-transforms">
         <p>
         <sect3> Running averages <label id="running-averages">
         <p>
         <sect3> Differences <label id="differences">
         <p>
         <sect3> Seasonal differences <label id="seasonal-differences">
         <p>
         <sect3> Integration <label id="integration">
         <p>
         <sect3> Interpolation <label id="interpolation">
         <p>
         <sect3> Splines <label id="splines">
         <p>
         <sect3> Regression <label id="regression">
         <p>
         <sect3> Non linear fit <label id="non-linear-fit">
         <p>
         <sect3> Cross/auto correlation <label id="cross/auto-correlation">
         <p>
         <sect3> Digital filter <label id="digital-filter">
         <p>
         <sect3> Linear convolution <label id="linear-convolution">
         <p>
         <sect3> Geometric transforms <label id="geometric-transforms">
         <p>
         <sect3> Sample points <label id="sample-points">
         <p>
         <sect3> Extract points in region <label id="extract-points-in-region">
         <p>
         <sect3> Delete points in region <label id="delete-points-in-region">
         <p>
         <sect3> Feature extraction <label id="feature-extraction">
         <p>
         <sect3> Prune data <label id="prune-data">
         <p>

   <sect1> Plot menu <label id="plot-menu">
   <p>
      <sect2> Plot appearance <label id="plot-appearance">
      <p>
      <sect2> Graph appearance <label id="graph-appearance">
      <p>
      <sect2> Set appearance <label id="set-appearance">
      <p>
      <sect2> Axis properties <label id="axis-properties">
      <p>

   <sect1> View menu <label id="view-menu">
   <p>
      <sect2> Show locator bar <label id="show-locator-bar">
      <p>
      <sect2> Show status bar <label id="show-status-bar">
      <p>
      <sect2> Show tool bar <label id="show-tool-bar">
      <p>
      <sect2> Redraw <label id="redraw">
      <p>
      <sect2> Update all <label id="update-all">
      <p>

   <sect1> Window menu <label id="window-menu">
   <p>
      <sect2> Commands <label id="commands">
      <p>
      <sect2> Point tracking <label id="point-tracking">
      <p>
      <sect2> Drawing objects <label id="drawing-objects">
      <p>
      <sect2> Font tool <label id="font-tool">
      <p>
      <sect2> Results <label id="results">
      <p>

   <sect1> Help menu <label id="help-menu">
   <p>
      <sect2> On context <label id="on-context">
      <p>
      <sect2> User guide <label id="user-guide">
      <p>
      <sect2> Tutorial <label id="tutorial">
      <p>
      <sect2> FAQ <label id="faq">
      <p>
      <sect2> Changes <label id="changes">
      <p>
      <sect2> Comments <label id="comments">
      <p>
      <sect2> License terms <label id="license-terms">
      <p>
      <sect2> About <label id="about">
      <p>

<!-- **************************************** -->
<sect>GUI controls
  <p>
    <sect1>List selectors
       <p>
       Various selectors are available in several popups. They all display
       lists of objects (graphs, sets, ...) and can be used to perform
       simple operations on this objects (copying, deleting, ...). The
       operations are triggered by a popup menu that appear when pressing
       the right mouse button on them.

       <sect1> Graph selector <label id="graph-selector">
       <p>
       The operations that can be performed on graphs through the graph
       selector's menu popup are :
       <itemize>
         <item> focus to
         <item> hide
         <item> show
         <item> duplicate
         <item> kill
         <item> swap
         <item> create new
       </itemize>
       All this operations are not available in every instance of the
       selector. For example in the "read sets" popup only one graph can
       be selected at a time, and the swap operation is disabled.
       
       Double-clicking on a list entry will switch the focus to that graph.

       <sect1> Set selector <label id="set-selector">
       <p>
       The operations that can be performed on sets through the set
       selector are :
       <itemize>
         <item> hide
         <item> show
         <item> bring to front
         <item> send to back
         <item> duplicate
         <item> kill
         <item> kill data
         <item> swap
         <item> edit
         <itemize>
           <item> in spreadsheet
           <item> in text editor
         </itemize>
         <item> create new
         <itemize>
           <item> by formula
           <item> in spreadsheet
           <item> in text editor
           <item> from block data
         </itemize>
         <item> pack all sets
         <item> selectors operations
         <itemize>
           <item> show data-less
           <item> show hidden
           <item> select all
           <item> unselect all
           <item> invert selection
           <item> update
         </itemize>
       </itemize>


<!-- **************************************** -->
<sect>Canvas actions
  <p>

  <sect1>Hotkeys
    <p>

      When the pointer focus is on the canvas (where the graph is drawn), there
      are some shortcuts to activate several actions. They are:

      <itemize>
        <item> Ctrl &lt;Key&gt;A: Autoscale
        <item> Ctrl &lt;Key&gt;D: Delete an object
        <item> Ctrl &lt;Key&gt;L: Move current graph legend
        <item> Ctrl &lt;Key&gt;M: Move an object
        <item> Ctrl &lt;Key&gt;T: Place timestamp
        <item> Ctrl &lt;Key&gt;U: Refresh hotlinks
        <item> Ctrl &lt;Key&gt;V: Set the viewport with mouse
        <item> Ctrl &lt;Key&gt;Z: Zoom
        <item> Ctrl Alt &lt;Key&gt;L: Draw a line
        <item> Ctrl Alt &lt;Key&gt;B: Draw a box
        <item> Ctrl Alt &lt;Key&gt;E: Draw an ellipse
        <item> Ctrl Alt &lt;Key&gt;T: Write a text string
      </itemize>

  <sect1>Clicks and double clicks<label id="clicks">
    <p>

      A single click inside a graph switches focus to that graph. This is the
      default policy, but it can be changed from the "Edit/Preferences"
      popup.

    <p>

      Double clicking on parts of the canvas will invoke certain actions
      or raise some popups:
      
      <itemize>
        <item> on a focus marker: move selected viewport corner 
        <item> on an axis:  "Axis properties" popup
        <item> on a set:    "Set appearance" popup
        <item> on a legend: "Graph appearance" popup
        <item> on a (sub)title: "Graph appearance" popup
        <item> on an object (box, line, ...): a popup for editing properties of that object
      </itemize>

      The double clicking actions can be enabled/disabled from the
      "Edit/Preferences" popup.

<!-- **************************************** -->
<sect>Command interpreter <label id="command-interpreter">
  <p>

  <sect1>Definitions
    <p>

      Not written yet...

  <sect1>Graph properties
    <p>

      Not written yet...

  <sect1>Set properties
    <p>

      Not written yet...

  <sect1>Device parameters
    <p>

      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command                                       | Description   @
              <hline>
              PAGE SIZE xdim, ydim                          | set page dimensions (in pp) of all devices  @
              DEVICE <it/"devname"/ PAGE SIZE xdim, ydim    | set page dimensions (in pp) of device <it/devname/  @
              DEVICE <it/"devname"/ DPI dpi                 | set device's dpi (dots per pixel) @
              DEVICE <it/"devname"/ FONT onoff              | enable/disable usage of built-in fonts for device <it/devname/ @
              DEVICE <it/"devname"/ FONT ANTIALIASING onoff | enable/disable font aliasing for device <it/devname/ @
              DEVICE <it/"devname"/ OP <it/"options"/       | set device specific options (see <ref id="device-settings" name="Device-specific settings">) @
              HARDCOPY DEVICE <it/"devname"/                | set device <it/devname/ as current hardcopy device @
              <hline>
      </tabular>
      <caption>
              <label id="device-parameters">
              Device parameters.
      </caption>
      </table>

  <sect1>Functions and variables
    <p>

      Not written yet...

  <sect1>Procedures
    <p>

      Not written yet...

<!-- **************************************** -->
<sect>Advanced topics
  <p>

  <sect1>Adding/replacing fonts
    <p>

  <sect1>Interaction with other applications
    <p>

    <sect2>Using pipes
      <p>

    <sect2>Using grace&lowbar;np library
      <p>
      The grace&lowbar;np library is a set of compiled functions that
      allows you to launch and drive a Grace subprocess from your C or
      Fortran application. Functions are provided to start the
      subprocess, to send it commands or data, to stop it or detach
      from it.

      <table LOC=htbp>
      <tabular CA="lll">
              <hline>
Function | Arguments |  Description   @
              <hline>

int GraceOpen |
(int <it>buf&lowbar;size</it>) |
launch a Grace subprocess and open a communication channel with it @

int GraceIsOpen |
(void) |
test if a Grace subprocess is currently connected @

int GraceClose |
(void)  |
close the communication channel and exit the Grace subprocess @

int GraceClosePipe |
(void) |
close the communication channel and leave the Grace subprocess alone @

              <hline>

int GraceFlush |
(void) |
flush all the data remaining in the buffer @

int GracePrintf |
(const char* <it>format</it>, ...) |
format a command and send it to the Grace subprocess @

int GraceCommand |
(const char* <it>cmd</it>) |
send an already formated command to the Grace subprocess @
              <hline>
GraceErrorFunctionType <newline> GraceRegisterErrorFunction |
(GraceErrorFunctionType <it>f</it>) |
register a user function <it>f</it> to display library errors @
              <hline>
      </tabular>
      <caption>
              <label id="C functions">
              grace&lowbar;np library C functions.
      </caption>
      </table>

      <table LOC=htbp>
      <tabular CA="lll">
              <hline>
Function | Arguments |  Description   @
              <hline>

integer GraceOpenF |
(integer <it>buf&lowbar;size</it>) |
launch a Grace subprocess and open a communication channel with it @

integer GraceIsOpenF |
(void) |
test if a Grace subprocess is currently connected @

integer GraceCloseF |
(void)  |
close the communication channel and exit the Grace subprocess @

integer GraceClosePipeF |
(void) |
close the communication channel and leave the Grace subprocess alone @

              <hline>

integer GraceFlushF |
(void) |
flush all the data remaining in the buffer @

integer GraceCommandF |
(character*(*) <it>cmd</it>) |
send an already formatted command to the Grace subprocess @
              <hline>
GraceFortranFunctionType <newline> GraceRegisterErrorFunctionF |
(GraceFortranFunctionType <it>f</it>) |
register a user function <it>f</it> to display library errors @
              <hline>
      </tabular>
      <caption>
              <label id="fortran functions">
              grace&lowbar;np library F77 functions.
      </caption>
      </table>

      <p> There is no fortran equivalent for the GracePrintf function,
      you should format all the data and commands yourself before
      sending them with GraceCommandF.

      The Grace subprocess listen for the commands you send and
      interpret them as if they were given in a batch file. You can
      send any command you like (redraw, autoscale, ...). If you want
      to send data, you should include them in a command like "g0.s0
      point 3.5, 4.2".

      Apart from the fact it monitors the data sent via an anonymous
      pipe, the Grace subprocess is a normal process. You can interact
      with it through the GUI. Note that no error can be sent back to
      the parent process. If your application send erroneous commands,
      an error popup will be displayed by the subprocess.

      If you exit the subprocess while the parent process is still
      using it, the broken pipe will be detected. An error code will
      be returned to every further call to the library (but you can
      still start a new process if you want to manage this situation).

      Here is an example use of the library, you will find this
      program in the distribution.

<tscreen><code>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include "grace_np.h"

#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#endif

#ifndef EXIT_FAILURE
#  define EXIT_FAILURE -1
#endif

void my_error_function(const char *msg)
{
    fprintf(stderr, "library message : \"%s\"\n", msg);
}

int
main(int argc, char* argv[])
{
    int i;

    GraceRegisterErrorFunction(my_error_function);

    /* Start Grace with a buffer size of 2048 and open the pipe */
    if (GraceOpen(2048) == -1) {
        fprintf(stderr, "Can't run Grace. \n");
        exit(EXIT_FAILURE);
    }
    
    /* Send some initialization commands to Grace */
    GracePrintf("world xmax 100");
    GracePrintf("world ymax 10000");
    GracePrintf("xaxis tick major 20");
    GracePrintf("xaxis tick minor 10");
    GracePrintf("yaxis tick major 2000");
    GracePrintf("yaxis tick minor 1000");
    GracePrintf("s0 on");
    GracePrintf("s0 symbol 1");
    GracePrintf("s0 symbol size 0.3");
    GracePrintf("s0 symbol fill pattern 1");
    GracePrintf("s1 on");
    GracePrintf("s1 symbol 1");
    GracePrintf("s1 symbol size 0.3");
    GracePrintf("s1 symbol fill pattern 1");

    /* Display sample data */
    for (i = 1; i <= 100 && GraceIsOpen(); i++) {
        GracePrintf("g0.s0 point %d, %d", i, i);
        GracePrintf("g0.s1 point %d, %d", i, i * i);
        /* Update the Grace display after every ten steps */
        if (i % 10 == 0) {
            GracePrintf("redraw");
            /* Wait a second, just to simulate some time needed for
               calculations. Your real application shouldn't wait. */
            sleep(1);
        }
    }

    if (GraceIsOpen()) {
        /* Tell Grace to save the data */
        GracePrintf("saveall \"sample.agr\"");

        /* Flush the output buffer and close Grace */
        GraceClose();

        /* We are done */
        exit(EXIT_SUCCESS);
    } else {
        exit(EXIT_FAILURE);
    }
}

</code></tscreen>

  <sect1>FFTW tuning
    <p>
     When the FFTW capabilities are compiled in, Grace looks at two environment
     variables to decide what to do with the FFTW 'wisdom' capabilities. 
     First, a quick summary of what this is. The FFTW package is capable of
     adaptively determining the most efficient factorization of a set to give
     the fastest computation.  It can store these factorizations as 'wisdom',
     so that if a transform of a given size is to be repeated, it is does not
     have to re-adapt.  The good news is that this seems to work very well. 
     The bad news is that, the first time a transform of a given size is
     computed, if it is not a submultiple of one already known, it takes a LONG
     time (seconds to minutes).
    <p>
     The first environment variable is GRACE_FFTW_WISDOM_FILE. If this is set
     to the name of a file which can be read and written (e.g.,
     $HOME/.grace_fftw_wisdom) then Grace will automatically create this file
     (if needed) and maintain it. If the file is read-only, it will be read,
     but not updated with new wisdom. If the symbol GRACE_FFTW_WISDOM_FILE
     either doesn't exist, or evaluates to an empty string, Grace will drop the
     use of wisdom, and will use the fftw estimator (FFTW_ESTIMATE flag sent to
     the planner) to guess a good factorization, instead of adaptively
     determining it.
    <p>
     The second variable is GRACE_FFTW_RAM_WISDOM. If this variable is defined
     to be non-zero, and GRACE_FFTW_WISDOM_FILE variable is not defined (or is
     an empty string), Grace will use wisdom internally, but maintain no
     persistent cache of it. This will result in very slow execution times the
     first time a transform is executed after Grace is started, but very fast
     repeats. I am not sure why anyone would want to use wisdom without
     writing it to disk, but if you do, you can use this flag to enable it.
    <p>

  <sect1>DL modules
    <p>

<!-- ****** Appendicies/references ************ -->
<sect> References
  <p>
  
  <sect1>Typesetting<label id="typesetting">
    <p>
      Grace permits quite complex typesetting on a per string basis.
      Any string displayed (titles, legends, tick marks,...) may contain
      special control codes to display subscripts, change fonts within the
      string etc.
       <p>

      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Control code | Description   @
              <hline>
              &bsol;f{x}   | switch to font named "x"   @
              &bsol;f{n}   | switch to font number n (not recommended)   @
              &bsol;f{}    | return to original font   @
              &bsol;u      | begin underline   @
              &bsol;U      | stop underline   @
              &bsol;o      | begin overline   @
              &bsol;O      | stop overline   @
              &bsol;c      | begin using upper 128 characters of set   @
              &bsol;C      | stop using upper 128 characters of set   @
              &bsol;z{x}   | zoom x times   @
              &bsol;z{}    | return to original zoom   @
              &bsol;v{x}   | shift vertically by x   @
              &bsol;v{}    | return to unshifted baseline   @
              &bsol;h{x}   | horizontal shift by x   @
              &bsol;m{n}   | mark current position as n   @
              &bsol;M{n}   | return to saved position n   @
              &bsol;dl     | LtoR substring direction   @
              &bsol;dr     | RtoL substring direction   @
              &bsol;dL     | LtoR text advancing   @
              &bsol;dR     | RtoL text advancing   @
              <hline>
              &bsol;x      | switch to Symbol font (same as &bsol;f{Symbol})   @
              &bsol;+      | increase size (same as &bsol;z{1.19} ; 1.19 = sqrt(sqrt(2)))   @
              &bsol;-      | decrease size (same as &bsol;z{0.84} ; 0.84 = 1/sqrt(sqrt(2)))   @
              &bsol;s      | begin subscripting (same as &bsol;v{-0.4}&bsol;z{0.71})   @
              &bsol;S      | begin superscripting (same as &bsol;v{0.6}&bsol;z{0.71})   @
              &bsol;N      | return to normal style (same as &bsol;v{}&bsol;z{})   @
              <hline>
              &bsol;&bsol; | print &bsol;   @
              <hline>
      </tabular>
      <caption>
              <label id="control-codes">
              Control codes.
      </caption>
      </table>

      <p>
       Example:
      <p>
       F&bsol;sX&bsol;N(&bsol;xe&bsol;f{}) = sin(&bsol;xe&bsol;B)&bsol;c7&bsol;Ce&bsol;S-X&bsol;N&bsol;c7&bsol;Ccos(&bsol;xe&bsol;f{})
      <p>
       prints roughly
       <tscreen><verb>
                       -x
       F (e) = sin(e)&middot;e  &middot;cos(e)
        x
       </verb></tscreen>
      <p>
       using string's initial font and e prints as epsilon from the Symbol font.
      <p>
       NOTE:
       Characters from the upper half of the char table can be entered directly
       from the keyboard, using appropriate <tt>xmodmap(1)</tt> settings, or
       with the help of the font tool ("Window/Font tool").
      <p>

  <sect1>Device-specific limitations<label id="device-limitations">
    <p>
      
      Grace can output plots using several device backends. The list of
      available devices can be seen (among other stuff) by specifying the
      "-version" command line switch.
      <itemize>
        <item> X11, PostScript and EPS are full-featured devices
        <item> Raster drivers (PNM/JPEG/PNG):
               <itemize>
                 <item> only even-odd fill rule is supported
                 <item> patterned lines are not implemented
               </itemize>
        <item> PDF driver:
               <itemize>
                 <item> patterned fills are not implemented
                 <item> bitmapped text strings are not transparent
                 <item> arcs of angles != 90*n are approximated very roughly
               </itemize>
      </itemize>
      
      <p>

  <sect1>Device-specific settings<label id="device-settings">
    <p>
      
      Some of the output devices accept several configuration options. You can
      set the options by passing a respective string to the interpreter
      using the "DEVICE <it/"devname"/ OP <it/"options"/" command (see
      <ref id="device-parameters" name="Device parameters">). A few options
      can be passed in one command, separated by commas.

    <p>
      
      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command           | Description                               @
              <hline>
              grayscale         | set grayscale output                      @
              color             | set color output                          @
              level1            | use only PS Level 1 subset of commands    @
              level2            | use also PS Level 2 commands if needed    @
              xoffset:<it/x/    | set page offset in X direction <it/x/ pp  @
              yoffset:<it/y/    | set page offset in Y direction <it/y/ pp  @
              <hline>
      </tabular>
      <caption>
              PostScript driver options
      </caption>
      </table>

    <p>
      
      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command       | Description                                   @
              <hline>
              grayscale     | set grayscale output                          @
              color         | set color output                              @
              bbox:tight    | enable "tight" bounding box                   @
              bbox:page     | bounding box coinsides with page dimensions   @
              <hline>
      </tabular>
      <caption>
              EPS driver options
      </caption>
      </table>

    <p>

      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command           | Description               @
              <hline>
              format:pbm        | output in PBM format      @
              format:pgm        | output in PGM format      @
              format:ppm        | output in PPM format      @          
              rawbits:on        | "rawbits" (binary) output @          
              rawbits:off       | ASCII output              @          
              <hline>
      </tabular>
      <caption>
              PNM driver options
      </caption>
      </table>

    <p>

      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command               | Description                           @
              <hline>
              grayscale             | set grayscale output                  @
              color                 | set color output                      @
              optimize:on/off       | enable/disable optimization           @
              quality:value         | set compression quality (0 - 100)     @
              smoothing:value       | set smoothing (0 - 100)               @
              baseline:on/off       | do/don't force baseline output        @
              progressive:on/off    | do/don't output in progressive format @
              dct:ifast             | use fast integer DCT method           @
              dct:islow             | use slow integer DCT method           @
              dct:float             | use floating-point DCT method         @
              <hline>
      </tabular>
      <caption>
              JPEG driver options
      </caption>
      </table>

    <p>

      <table LOC=htbp>
      <tabular CA="ll">
              <hline>
              Command           | Description                       @
              <hline>
              interlaced:on     | make interlaced image             @
              interlaced:off    | don't make interlaced image       @
              transparent:on    | produce transparent image         @
              transparent:off   | don't produce transparent image   @
              compression:value | set compression level (0 - 9)     @
              <hline>
      </tabular>
      <caption>
              PNG driver options
      </caption>
      </table>

    <p>


    <sect1>Dates in Grace <label id="dates">
    
    <p>
      We use two calendars in Grace : the one that was established in
      532 by Denys and lasted until 1582, and the one that was created
      by Luigi Lilio (Alyosius Lilius) and Christoph Klau
      (Christophorus Clavius) for pope Gregorius XIII. Both use the
      same months (they were introduced under emperor Augustus, a few
      years after julian calendar introduction, both Julius and
      Augustus were honored by a month beeing named after each one).
      
      The leap years occured regularly in Denys's calendar : once
      every four years, there is no year 0 in this calendar (the leap
      year -1 was just before year 1). This calendar was not compliant
      with earth motion and the dates were slowly shifting with regard
      to astronomical events.
      
      This was corrected in 1582 by introducing gregorian
      calendar. First a ten days shift was introduced to reset correct
      dates (Thursday October the 4th was followed by Friday October
      the 15th). The rules for leap years were also changed : three
      leap years are removed every four centuries. These years are
      those that are multiple of 100 but not multiple of 400 : 1700,
      1800, and 1900 were not leap years, but 1600 and 2000 were (will
      be) leap years.
      
      We still use gregorian calendar today, but we now have several
      time scales for increased accuracy. The International Atomic
      Time is a linear scale : the best scale to use for scientific
      reference. The Universal Time Coordinate (often confused with
      Greenwhich Mean Time) is a legal time that is almost
      synchronized with earth motion. However, since the earth is
      slightly slowing down, leap seconds are introduced from time to
      time in UTC (about one second every 18 monthes). UTC is not a
      continuous scale ! When a leap second is introduced by
      International Earth Rotation Service, this is published in
      advance and the legal time sequence is as follows : 23:59:59
      followed one second later by 23:59:60 followed one second later
      by 00:00:00. At the time of this writing (1999-01-05) the
      difference between IAT and UTC was 32 seconds, and the last leap
      second was introduced in 1998-12-31.
      
      These calendars allow to represent any date from the mist of the
      past to the fog of the future, but they are not convenient for
      computation. Another time scale is of possible : counting only
      the days from a reference. Such a time scale was introduced by
      Joseph-Juste Scaliger (Josephus Justus Scaliger) in 1583. He
      decided to use "-4713-01-01 12:00:00" as a reference date
      because it was at the same time a monday, first of January of a
      leap year, there was an exact number of 19 years Meton cycle
      between this date and year 1 (for Easter computation), and it
      was at the beginning of a 15 years <it>roman indiction</it>
      cycle. The day number is called <it>julian day</it>, but it has
      really nothing to do with the julian calendar.
      
      The following date formats are supported (hour, minutes and
      seconds are always optional):
      
      <enum>
      <item>iso8601   : 1999-12-31 23:59:59.999
      <item>european  : 31/12/1999 23:59:59.999 or 31/12/99 23:59:59.999
      <item>us        : 12/31/1999 23:59:59.999 or 12/31/99 23:59:59.999
      <item>Julian    : 123456.789
      </enum>
      
      The formats are tried in the following order : iso, european and
      us (there is no ambiguity between calendar formats and numerical
      formats and therefore no order is specified for them). The
      separators between various fields can be any characters in the
      set : " :/.-" (one or more spaces act as one separator, other
      characters can not be repeated), so the string "1999-12
      31:23-59" is allowed (but not recommended).  The '-' character
      is used both as a separator (it is traditionally used in iso8601
      format) and as the unary minus (for dates in the far past or for
      numerical dates). By default years are left untouched, so 99 is
      a date far away in the past. This behaviour can be changed with
      the "Edit->preferences" popup, or with the <tt>Y2KWRAP
      on</tt> command. In such a situation, if the year is between 0
      and 99 and is written with two or less digits, it is mapped to
      the present era as follows :

       range [00 ; 49] is mapped to [2000 ; 2049]
       range [50 ; 99] is mapped to [1950 ; 1999]

      this is reasonably Y2K compliant and is consistent with current use.
      Specifying year 1 is still possible using more than two digits
      as follows : "0001-03-04" is unambiguously March the 4th, year
      1. The inverse transform is applied for dates written by Grace,
      for example as tick labels. Using two digits only for years is
      not recommended, we introduce a 2050 bug here so this feature
      should be removed at some point in the future ...
      
      Numerical (julian) dates are computed according to a customizable
      reference date.  The default value is given by the REFDATE
      command (you can set it in your configuration files). The
      default value is "-4713-01-01 12:00:00",
      it is a classical reference for astronomical events (note that
      the '-' is used here both as a unary minus and as a separator).
      
      The date parser can be used either for Denys's and gregorian
      calendars. Inexistant dates are detected, they include year 0,
      dates between 1582-10-05 and 1582-10-14, February 29th of non
      leap years, months below 1 or above 12, ...  the parser does not
      take into account leap seconds : you can think it works only in
      International Atomic Time (IAT) and not in Unified Time
      Coordinate (UTC). If you find yourself in a situation were you
      need UTC, a very precise scale, and should take into account
      leap seconds ... you should convert your data yourself (for
      example using International Atomic Time). But if you bother with
      that you probably already know what to do.


    <sect1>Xmgr to Grace migration guide
    
    <p>
      
      This is a very brief guide describing problems and workarounds for
      reading in project files saved with Xmgr. You should read the docs or
      just play with Grace to test new features and controls.
 
      <enum>
      <item> DOCUMENTATION IS VERY SPARSE YET!!!
 
      <item> Grace must be explicitly told the version number of the software
             used to create a file. You can manually put "@version VERSIONID"
             string in the beginning of the file. The VERSIONID is built as
             MAJOR_REV*10000 + MINOR_REV*100 + PATCHLEVEL; so 40101 corresponds
             to xmgr-4.1.1. Projects saved with Xmgr-4.1.2 do NOT need the above,
             since they already have the version string in them.
 
      <item> The above relates to the ascii projects only. The old binary
             projects (saved with xmgr-4.0.*) are not automatically converted
             anymore. An input filter must be defined to make the conversion work
             on-the-fly. Add the following line to ~/.gracerc or the system-wide
             $GRACE_HOME/gracerc resource file: DEFINE IFILTER "grconvert %s -"
             MAGIC "00000031" See docs for more info on the I/O filters.
 
      <item> Grace is WYSIWYG. Xmgr was not. Many changes required to achieve the
             WYSIWYG'ness led to the situation when graphs with objects carefully
             aligned under Xmgr may not look so under Grace. Grace tries its best
             to compensate for the differences, but sometimes you may have to
             adjust such graphs manually.
 
      <item> Smith plots don't work now. They'll be put back soon.
 
      <item> A lot of symbol types (all except *real* symbols) are removed.
             "Location *" types can be replaced (with much higher comfort) by
             A(nnotating)values. "Impulse *", "Histogram *" and "Stair steps *"
             effects can be achieved using the connecting line parameters (Type,
             Drop lines). "Dot" symbol is removed as well; use the filled circle
             symbol of the zero size with no outline to get the same effect.
 
      <item> Default page layout switched from free (allowing to resize canvas
             with mouse) to fixed. For the old behaviour, put "PAGE LAYOUT FREE"
             in the Grace resource file or use the "-free" command line switch.
             The use of the "free" page layout is in general deprecated, though.
 
      <item> System variables GR_* renamed to GRACE_*
 
      </enum>
    

</article>

<!-- End of USerGuide.sgml -->
