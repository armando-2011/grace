If your computer has the FFTW libraries installed when Grace is compiled, Grace
will link itself to these, and drop all conventional FFT's and DFT's.  All
transforms will be routed through this package.  Note that there is then no
difference between pushing the "FFT" button and the "DFT" button, except that
FFT will complain if the length isn't a power of 2, and DFT will not.

For more information on this package, see
http://theory.lcs.mit.edu/~fftw/
which is the home page. In short, this
package allows one to do non-power-of-2 length FFT's along with the normal
ones.  It seems to work very efficiently for any set length which factors
into
2^a 3^b 5^c 7^d for integer a,b,c,d.  It can also handle a factor of 11 and
13, but my own personal measurements indicated that these didn't really run
terribly fast.  I would mostly stick with the small primes. The great
feature here is that set lengths which are powers of 10 (e.g. 1000, 10000)
and integer multiples of these (500, 2000, 2500, 5000, etc.) can be
computed with no significant penalty (maybe 20%) over power-of-2
transforms.  Very often, real datasets come in these sizes, and not in
powers of 2.

When the FFTW capabilities are compiled in, Grace looks at two environment
variables to decide what to do with the FFTW 'wisdom' capabilities.  First,
a quick summary of what this is.  The FFTW package is capable of adaptively
determining the most efficient factorization of a set to give the fastest
computation.  It can store these factorizations as 'wisdom', so that if a
transform of a given size is to be repeated, it is does not have to
re-adapt.  The good news is that this seems to work very well.  The bad
news is that, the first time a transform of a given size is computed, if it
is not a submultiple of one already known, it takes a LONG time (seconds to
minutes).

The first environment variable is GRACE_FFTW_WISDOM_FILE.  If this is set to
the name of a file which can be read and written (I use
$HOME/.grace_fftw_wisdom) then Grace will automatically create this file (if
needed) and maintain it.  If the file is read-only, it will be read, but
not updated with new wisdom.  If the symbol GRACE_FFTW_WISDOM_FILE either
doesn't exist, or evaluates to an empty string, Grace will drop the use of
wisdom, and will use the fftw estimator (FFTW_ESTIMATE flag sent to the
planner) to guess a good factorization, instead of adaptively determining
it.

The second variable is GRACE_FFTW_RAM_WISDOM.  If this variable is defined to
be non-zero, and GRACE_FFTW_WISDOM_FILE variable is not defined (or is an
empty string),  Grace will use wisdom internally, but maintain no persistent
cache of it.  This will result in very slow execution times the first time
a transform is executed after Grace is started, but very fast repeats.  I am
not sure why anyone would want to use wisdom without writing it to disk,
but if you do, you can use this flag to enable it.

Marcus H. Mendenhall <marcus.h.mendenhall@vanderbilt.edu>

