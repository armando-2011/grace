TOP=..

include $(TOP)/Make.conf

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../lib/gtest-1.6.0

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

CFLAGS= $(CXXFLAGS) -I$(TOP)/include -I. \
	$(T1_INC) $(EXPAT_INC) $(GSL_CFLAGS) $(CUPS_CFLAGS) \
	$(CPPFLAGS) $(XBAE_INC) $(GUI_FLAGS)

LIBS=$(GUI_LIBS) \
	$(GRACE_LIB) $(EXPAT_LIB) $(GRACE_PLOT_LIB) $(GRACE_GRAAL_LIB) \
	$(GRACE_CORE_LIB) $(GRACE_CANVAS_LIB) $(T1_LIB) $(XMI_LIB) \
	$(PDF_LIB) $(HARU_LIB) $(JPEG_LIB) $(PNG_LIB) $(Z_LIB) \
	$(GRACE_BASE_LIB) $(UNDO_LIB) \
	$(GSL_LIBS) $(NETCDF_LIBS) $(FFTW_LIB) $(CUPS_LIBS) \
	$(WINDOWS_LIBS) $(NOGUI_LIBS) $(DL_LIB)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = check_grace$(EXE)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.
all :

check : $(TESTS)
	$(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

#include ../src/Make.common

check_grace.o : $(USER_DIR)/check_grace.cpp $(GTEST_HEADERS)
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/check_grace.cpp

check_grace$(EXE) : check_grace.o gtest_main.a \
    $(GRACE_LIB) $(GRACE_PLOT_LIB) $(GRACE_CORE_LIB) \
	$(GRACE_GRAAL_LIB) $(GRACE_CANVAS_LIB) $(GRACE_BASE_LIB)
	$(CXX) $(CFLAGS) $^ $(GRACE_QTGUI_LIB) -o $@ $(LDFLAGS) $(LIBS) -lpthread 


check_lib.o : $(USER_DIR)/check_lib.cpp $(GTEST_HEADERS)
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/check_lib.cpp

check_lib$(EXE) : check_lib.o gtest_main.a
	$(CXX) $(CFLAGS) -lpthread $^ -o $@ $(LDFLAGS) $(LIBS)

